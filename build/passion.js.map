{"version":3,"sources":["main.js","Application.js","Assets.js","Camera.js","Danmaku.js","Background.js","Bullet.js","BulletDrawer.js","BulletEraseEffect.js","CircleButton.js","Enemy.js","GLLayer.js","ParticleSystem.js","Player.js","Shot.js","SpritDrawer.js","Sprite.js","UIFrame.js","UIHeadLabel.js","UILayer.js","GameSceneBg.js","GameManager.js","Pool.js","GameScene.js","StageAssetLoadScene.js","Utils.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC/DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC9GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxjIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC/KA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChvHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxlJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC9DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACntfile":"passion.js","sourcesContent":["var SCREEN_WIDTH = 360;\r\nvar SCREEN_HEIGHT = 640;\r\nvar GAME_AREA_WIDTH = SCREEN_WIDTH;\r\nvar GAME_AREA_HEIGHT = SCREEN_HEIGHT * 0.85;\r\nvar FPS = 60;\r\n\r\nphina.main(function() {\r\n\r\n  phina.display.DisplayScene.defaults.$extend({\r\n    width: SCREEN_WIDTH,\r\n    height: SCREEN_HEIGHT,\r\n    backgroundColor: \"transparent\",\r\n  });\r\n  \r\n  phina.display.Label.defaults.fontFamily = \"main\";\r\n  phina.display.Label.defaults.fill = \"white\";\r\n\r\n  var app = passion.Application();\r\n  if (location.hostname == \"localhost\") {\r\n    app.enableStats();\r\n  }\r\n  app.run();\r\n\r\n  app.replaceScene(phina.game.ManagerScene({\r\n    scenes: [\r\n\r\n      {\r\n        className: \"phina.game.LoadingScene\",\r\n        arguments: {\r\n          assets: passion.Assets.get({ assetType: \"common\" }),\r\n        },\r\n      },\r\n\r\n      {\r\n        className: \"passion.StageAssetLoadScene\",\r\n        arguments: {\r\n          stage: \"testStage\",\r\n        },\r\n      },\r\n\r\n      {\r\n        className: \"passion.GameScene\",\r\n      },\r\n\r\n    ]\r\n  }));\r\n\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"passion.Application\", {\r\n    superClass: \"phina.display.CanvasApp\",\r\n\r\n    init: function() {\r\n      this.superInit({\r\n        width: SCREEN_WIDTH,\r\n        height: SCREEN_HEIGHT,\r\n        backgroundColor: \"#114\",\r\n      });\r\n\r\n      this.fps = FPS;\r\n    },\r\n\r\n  });\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"passion.Assets\", {\r\n    _static: {\r\n      get: function(options) {\r\n        switch (options.assetType) {\r\n          case \"common\":\r\n            return {\r\n              font: {\r\n                main: \"./asset/font/Baumans/Baumans-Regular.ttf\",\r\n                message: \"./asset/font/YasashisaGothic.ttf\",\r\n              },\r\n              image: {\r\n                \"bullets.png\": \"./asset/image/bullets.png\",\r\n                \"bullets_erase.png\": \"./asset/image/bullets_erase.png\",\r\n                \"texture0.png\": \"./asset/image/texture0.png\",\r\n              },\r\n              vertexShader: {\r\n                \"bullets.vs\": \"./asset/shader/bullets.vs\",\r\n                \"sprites.vs\": \"./asset/shader/sprites.vs\",\r\n              },\r\n              fragmentShader: {\r\n                \"bullets.fs\": \"./asset/shader/bullets.fs\",\r\n                \"sprites.fs\": \"./asset/shader/sprites.fs\",\r\n              },\r\n              // xml: {\r\n              //   \"simple\": \"./asset/bulletml/simple.xml\",\r\n              //   \"test\": \"./asset/bulletml/test.xml\",\r\n              // },\r\n              sound: {\r\n                \"home\": \"./asset/sound/nc136160.mp3\",\r\n                // \"bgm1\": \"./asset/sound/nc140053.mp3\",\r\n              },\r\n            };\r\n          default:\r\n            throw \"invalid assetType: \" + options.assetType;\r\n        }\r\n      },\r\n    },\r\n  });\r\n\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"passion.Camera\", {\r\n\r\n    position: null,\r\n    vMatrix: null,\r\n    pMatrix: null,\r\n    vpMatrix: null,\r\n\r\n    init: function() {\r\n      this.position = vec3.create();\r\n      this.vMatrix = mat4.create();\r\n      this.pMatrix = mat4.create();\r\n      this.vpMatrix = mat4.create();\r\n    },\r\n\r\n    setPosition: function(x, y, z) {\r\n      vec3.set(this.position, x, y, z);\r\n      return this;\r\n    },\r\n\r\n    lookAt: function(x, y, z) {\r\n      mat4.lookAt(this.vMatrix, this.position, [x, y, z], [0, 1, 0]);\r\n      return this;\r\n    },\r\n\r\n    ortho: function(left, right, bottom, top, near, far) {\r\n      mat4.ortho(this.pMatrix, left, right, bottom, top, near, far);\r\n      return this;\r\n    },\r\n\r\n    perspective: function(fovy, aspect, near, far) {\r\n      mat4.perspective(this.pMatrix, fovy, aspect, near, far);\r\n      return this;\r\n    },\r\n\r\n    calcVpMatrix: function() {\r\n      mat4.mul(this.vpMatrix, this.pMatrix, this.vMatrix);\r\n      return this;\r\n    },\r\n\r\n    uniformValues: function() {\r\n      return {\r\n        vpMatrix: this.vpMatrix,\r\n        cameraPosition: this.position,\r\n      };\r\n    }\r\n\r\n  });\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"passion.Danmaku\", {\r\n    _static: {\r\n\r\n      config: null,\r\n\r\n      setup: function(gameScene) {\r\n        var player = gameScene.player;\r\n        var bullets = gameScene.bullets;\r\n        var enemies = gameScene.enemies;\r\n        var glLayer = gameScene.glLayer;\r\n        var bulletDrawer = glLayer.bulletDrawer;\r\n        var enemyDrawer = glLayer.enemyDrawer;\r\n        bulletml.Walker.random = function() {\r\n          return gameScene.random.random();\r\n        };\r\n\r\n        this.config = {\r\n          target: player,\r\n          createNewBullet: function(runner, spec) {\r\n            var bullet = bulletDrawer.get();\r\n            if (bullet) {\r\n              bullet.spawn(runner, {\r\n                type: spec.type,\r\n                scale: 32,\r\n              });\r\n              gameScene.flare(\"spawnBullet\", { bullet: bullet });\r\n            }\r\n          },\r\n        };\r\n\r\n        return this.config;\r\n      },\r\n\r\n      createRunner: function(name) {\r\n        var bulletmlDoc = phina.asset.AssetManager.get(\"xml\", name);\r\n        var pattern = bulletml.buildXML(bulletmlDoc.data);\r\n        var config = passion.Danmaku.config;\r\n        return pattern.createRunner(config);\r\n      },\r\n    },\r\n\r\n    init: function() {},\r\n  });\r\n  \r\n  phina.asset.AssetLoader.assetLoadFunctions[\"bulletml\"] = phina.asset.AssetLoader.assetLoadFunctions[\"xml\"];\r\n\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"passion.Background\", {\r\n    superClass: \"passion.Sprite\",\r\n\r\n    _static: {\r\n      setup: function(glLayer, texture) {\r\n        var texSrc = phina.asset.AssetManager.get(\"image\", texture);\r\n        var height = texSrc.domElement.height * GAME_AREA_WIDTH / texSrc.domElement.width;\r\n        var tex = phina.graphics.Canvas().setSize(512, 512);\r\n        tex.context.drawImage(texSrc.domElement, 0, 0, 512, 512);\r\n        phina.asset.AssetManager.set(\"image\", texture + \"_bg\", tex);\r\n\r\n        glLayer.bgDrawer.addObjType(\"bg\", {\r\n          className: \"passion.Background\",\r\n          texture: texture + \"_bg\",\r\n          count: 2,\r\n        });\r\n\r\n        var bg1 = glLayer.bgDrawer.get(\"bg\");\r\n        bg1.spawn(height);\r\n        bg1.x = GAME_AREA_WIDTH / 2;\r\n        bg1.y = GAME_AREA_HEIGHT / 2;\r\n        bg1.addChildTo(glLayer);\r\n\r\n        var bg2 = glLayer.bgDrawer.get(\"bg\");\r\n        bg2.spawn(height);\r\n        bg2.x = GAME_AREA_WIDTH / 2;\r\n        bg2.y = GAME_AREA_HEIGHT / 2 - height;\r\n        bg2.addChildTo(glLayer);\r\n      },\r\n    },\r\n\r\n    height: 0,\r\n\r\n    init: function(id, instanceData, instanceStride) {\r\n      this.superInit(id, instanceData, instanceStride);\r\n      this.on(\"enterframe\", function() {\r\n        this.y += 3;\r\n        if (this.y > GAME_AREA_HEIGHT / 2 + this.height) {\r\n          this.y -= this.height * 2;\r\n        }\r\n      });\r\n    },\r\n\r\n    spawn: function(height) {\r\n      this.height = height;\r\n      passion.Sprite.prototype.spawn.call(this, {\r\n        scaleX: GAME_AREA_WIDTH,\r\n        scaleY: this.height,\r\n        frameX: 0,\r\n        frameY: 0,\r\n        frameW: 1,\r\n        frameH: 1,\r\n        red: 0.5,\r\n        green: 0.5,\r\n        blue: 0.5,\r\n      });\r\n      return this;\r\n    },\r\n\r\n  });\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"passion.Bullet\", {\r\n    superClass: \"phina.app.Element\",\r\n\r\n    id: -1,\r\n    instanceData: null,\r\n    runner: null,\r\n\r\n    x: 0,\r\n    y: 0,\r\n    age: 0,\r\n\r\n    power: 0,\r\n\r\n    _active: false,\r\n\r\n    radius: 20,\r\n\r\n    init: function(id, instanceData, instanceStride) {\r\n      this.superInit();\r\n      this.id = id;\r\n      this.instanceData = instanceData;\r\n\r\n      this.index = id * instanceStride;\r\n    },\r\n\r\n    spawn: function(runner, option) {\r\n      var instanceData = this.instanceData;\r\n      var index = this.index;\r\n\r\n      this.runner = runner;\r\n      this.x = runner.x;\r\n      this.y = runner.y;\r\n      this.age = 0;\r\n      instanceData[index + 0] = this.x;\r\n      instanceData[index + 1] = this.y;\r\n      instanceData[index + 2] = runner.direction; // rotation\r\n      instanceData[index + 3] = option.scale; // scale\r\n      instanceData[index + 4] = option.type % 8; // frame.x\r\n      instanceData[index + 5] = ~~(option.type / 8); // frame.y\r\n      instanceData[index + 6] = 1; // visible\r\n      instanceData[index + 7] = 1; // brightness\r\n      instanceData[index + 8] = 0.2 + ~~(option.type / 8) % 2; // auraColor.r\r\n      instanceData[index + 9] = 0.2 + 0; // auraColor.g\r\n      instanceData[index + 10] = 0.2 + ~~(option.type / 8) % 2 + 1; // auraColor.b\r\n\r\n      var self = this;\r\n      runner.onVanish = function() {\r\n        self.remove();\r\n      };\r\n\r\n      return this;\r\n    },\r\n\r\n    activate: function() {\r\n      this._active = true;\r\n      this.flare(\"activated\");\r\n      return this;\r\n    },\r\n\r\n    inactivate: function() {\r\n      this._active = false;\r\n      this.flare(\"inactivated\");\r\n      return this;\r\n    },\r\n\r\n    onremoved: function() {\r\n      this.instanceData[this.index + 6] = 0;\r\n    },\r\n\r\n    update: function(app) {\r\n      var instanceData = this.instanceData;\r\n      var index = this.index;\r\n      var runner = this.runner;\r\n\r\n      runner.update();\r\n      this.x = runner.x;\r\n      this.y = runner.y;\r\n\r\n      if (this.x < -50 || GAME_AREA_WIDTH + 50 < this.x || this.y < -50 || GAME_AREA_HEIGHT + 50 < this.y) {\r\n        this.remove();\r\n        return;\r\n      }\r\n\r\n      instanceData[index + 0] = this.x;\r\n      instanceData[index + 1] = this.y;\r\n      instanceData[index + 7] = 1.5 + Math.sin(this.age * 0.2) * 0.6;\r\n\r\n      this.age += 1;\r\n    },\r\n\r\n    isHit: function(target) {\r\n      if (!this.visible || !target.visible) return false;\r\n      return (this.x - target.x) * (this.x - target.x) + (this.y - target.y) * (this.y - target.y) < 5 * 5;\r\n    },\r\n\r\n    _accessor: {\r\n      visible: {\r\n        get: function() {\r\n          return this.instanceData[this.index + 6] == 1;\r\n        },\r\n        set: function(v) {\r\n          this.instanceData[this.index + 6] = v ? 1 : 0;\r\n        },\r\n      },\r\n    },\r\n  });\r\n\r\n});\r\n","phina.namespace(function() {\r\n  phina.define(\"passion.BulletDrawer\", {\r\n    superClass: \"phigl.InstancedDrawable\",\r\n\r\n    instanceData: null,\r\n\r\n    pool: null,\r\n    _count: 300,\r\n\r\n    init: function(gl, ext, w, h) {\r\n      this.superInit(gl, ext);\r\n\r\n      var shader = phigl.Program(gl)\r\n        .attach(\"bullets.vs\")\r\n        .attach(\"bullets.fs\")\r\n        .link();\r\n\r\n      this\r\n        .setProgram(shader)\r\n        .setDrawMode(gl.TRIANGLE_STRIP)\r\n        .setIndexValues([0, 1, 2, 3])\r\n        .setAttributes(\"position\", \"uv\")\r\n        .setAttributeDataArray([{\r\n          unitSize: 2,\r\n          data: [\r\n            //\r\n            -0.5, +0.5,\r\n            //\r\n            +0.5, +0.5,\r\n            //\r\n            -0.5, -0.5,\r\n            //\r\n            +0.5, -0.5,\r\n          ]\r\n        }, {\r\n          unitSize: 2,\r\n          data: [\r\n            //\r\n            0, 32 / 256,\r\n            //\r\n            32 / 256, 32 / 256,\r\n            //\r\n            0, 0,\r\n            //\r\n            32 / 256, 0,\r\n          ]\r\n        }, ])\r\n        .setInstanceAttributes(\r\n          \"instancePosition\",\r\n          \"instanceRotation\",\r\n          \"instanceScale\",\r\n          \"instanceFrame\",\r\n          \"instanceVisible\",\r\n          \"instanceBrightness\",\r\n          \"instanceAuraColor\"\r\n        )\r\n        .setUniforms(\r\n          \"vpMatrix\",\r\n          \"texture\",\r\n          \"globalScale\"\r\n        );\r\n\r\n      var instanceUnit = this.instanceStride / 4;\r\n      \r\n      var texture = phigl.Texture(gl, \"bullets.png\");\r\n\r\n      this.uniforms.texture.setValue(0).setTexture(texture);\r\n      this.uniforms.globalScale.setValue(1.0);\r\n\r\n      var instanceData = this.instanceData = [];\r\n      for (var i = 0; i < this._count; i++) {\r\n        instanceData.push(\r\n          // position\r\n          0, 0,\r\n          // rotation\r\n          0,\r\n          // scale\r\n          1,\r\n          // frame\r\n          0, 0,\r\n          // visible\r\n          0,\r\n          // brightness\r\n          0,\r\n          // auraColor\r\n          0, 0, 0\r\n        );\r\n      }\r\n      this.setInstanceAttributeData(instanceData);\r\n\r\n      var self = this;\r\n      this.pool = Array.range(0, this._count)\r\n        .map(function(id) {\r\n          return passion.Bullet(id, instanceData, instanceUnit)\r\n            .on(\"removed\", function() {\r\n              self.pool.add(this);\r\n            });\r\n        })\r\n        .toPool(function(lhs, rhs) {\r\n          return lhs.id - rhs.id;\r\n        });\r\n    },\r\n\r\n    get: function() {\r\n      return this.pool.get();\r\n    },\r\n\r\n    update: function(app) {\r\n      this.setInstanceAttributeData(this.instanceData);\r\n    },\r\n\r\n    render: function(uniforms) {\r\n      var gl = this.gl;\r\n      // gl.enable(gl.BLEND);\r\n      gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\r\n      // gl.disable(gl.DEPTH_TEST);\r\n\r\n      this.uniforms.globalScale.value = 1.0;\r\n      if (uniforms) {\r\n        uniforms.forIn(function(key, value) {\r\n          if (this.uniforms[key]) this.uniforms[key].value = value;\r\n        }.bind(this));\r\n      }\r\n\r\n      this.draw(this._count);\r\n    },\r\n  });\r\n\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"passion.BulletEraseEffect\", {\r\n    superClass: \"passion.Sprite\",\r\n\r\n    init: function(id, instanceData, instanceStride) {\r\n      this.superInit(id, instanceData, instanceStride);\r\n      this.on(\"enterframe\", function(e) {\r\n        if (e.app.ticker.frame % 2 === 0) {\r\n          this.frameX += 1 / 8;\r\n          if (this.frameX >= 1.0) {\r\n            this.remove();\r\n          }\r\n        }\r\n      });\r\n    },\r\n\r\n    spawn: function(options) {\r\n      passion.Sprite.prototype.spawn.call(this, {}.$extend(options, {\r\n        frameX: 0,\r\n        frameY: 1 / 8,\r\n        frameW: 1 / 8,\r\n        frameH: 1 / 8,\r\n        scaleX: 64,\r\n        scaleY: 64,\r\n        alpha: 1.0,\r\n      }));\r\n      return this;\r\n    },\r\n\r\n  });\r\n});\r\n"," phina.namespace(function() {\r\n\r\n   phina.define(\"passion.CircleButton\", {\r\n     superClass: \"phina.display.Shape\",\r\n\r\n     init: function(options) {\r\n       this.superInit({}.$extend(options, {\r\n         width: options.radius * 2,\r\n         height: options.radius * 2,\r\n       }));\r\n\r\n       this.interactive = true;\r\n       this.boundingType = \"circle\";\r\n       this.radius = options.radius;\r\n       this.backgroundColor = \"transparent\";\r\n       this.fill = \"hsla(190, 100%, 60%, 0.4)\";\r\n       this.stroke = \"hsla(190, 100%, 60%, 0.9)\";\r\n       this.strokeWidth = 2;\r\n       this.fromJSON({\r\n         children: {\r\n           text: {\r\n             className: \"phina.display.Label\",\r\n             arguments: {\r\n               text: options.text,\r\n               fontSize: options.fontSize || 24,\r\n               // fontWeight: \"bold\",\r\n               fontFamily: \"main\",\r\n             },\r\n             fill: \"hsla(190, 100%, 95%, 0.8)\",\r\n             strokeWidth: 0,\r\n           },\r\n         },\r\n       });\r\n     },\r\n\r\n     postrender: function(canvas) {\r\n       var c = canvas.context;\r\n\r\n       c.strokeStyle = \"hsla(190, 100%, 60%, 0.8)\";\r\n\r\n       c.beginPath();\r\n       c.arc(0, 0, this.radius * 0.65, 0, Math.PI * 2, false);\r\n       c.lineWidth = 1;\r\n       c.fill();\r\n       c.stroke();\r\n\r\n       c.beginPath();\r\n       c.arc(0, 0, this.radius * 0.75, 0, Math.PI * 2, false);\r\n       c.lineWidth = 3;\r\n       c.stroke();\r\n\r\n       c.strokeStyle = \"hsla(190, 100%, 60%, 0.8)\";\r\n       for (var a = 0, b; a < Math.PI * 2;) {\r\n         b = Math.randfloat(1.0, 2.0);\r\n         c.beginPath();\r\n         c.arc(0, 0, this.radius * 0.90, a, a + b, false);\r\n         c.lineWidth = 1;\r\n         c.stroke();\r\n         a += b * 1.5;\r\n       }\r\n\r\n       c.strokeStyle = \"hsla(190, 100%, 60%, 0.8)\";\r\n       for (var a = 0, b; a < Math.PI * 2;) {\r\n         b = Math.randfloat(1.0, 2.0);\r\n         c.beginPath();\r\n         c.arc(0, 0, this.radius * 1.00, a, a + b, false);\r\n         c.lineWidth = 1;\r\n         c.stroke();\r\n         a += b * 1.5;\r\n       }\r\n     },\r\n\r\n     onpointstart: function(e) {\r\n       this.scaleX = 1.2;\r\n       this.scaleY = 1.2;\r\n     },\r\n\r\n     onpointend: function(e) {\r\n       this.scaleX = 1.0;\r\n       this.scaleY = 1.0;\r\n       if (this.hitTest(e.pointer.x, e.pointer.y)) {\r\n         this.flare(\"clicked\");\r\n       }\r\n     },\r\n\r\n   });\r\n });\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"passion.Enemy\", {\r\n    superClass: \"passion.Sprite\",\r\n\r\n    moveRunner: null,\r\n    bulletRunner: null,\r\n\r\n    /**\r\n     * -1: pooling\r\n     * 0: wait (muteki)\r\n     * 1: not entered (muteki)\r\n     * 2: entered\r\n     * 3: killed or removing (muteki)\r\n     * @type {Number}\r\n     */\r\n    status: -1,\r\n\r\n    hp: 0,\r\n    active: false,\r\n    hitRadius: 0,\r\n\r\n    waitTime: 0,\r\n\r\n    bx: 0,\r\n    by: 0,\r\n\r\n    init: function(id, instanceData, instanceStride) {\r\n      this.superInit(id, instanceData, instanceStride);\r\n      this.on(\"removed\", function() {\r\n        // this.clear(\"everyframe\");\r\n        this.clear(\"damaged\");\r\n        this.clear(\"killed\");\r\n        this.tweener.clear();\r\n        this.moveRunner = null;\r\n        this.bulletRunner = null;\r\n        this.status = -1;\r\n        this.waitTime = 0;\r\n      });\r\n      this.on(\"enterframe\", function() {\r\n        if (this.status === 0) {\r\n          this.waitTime -= 1;\r\n          if (this.waitTime <= 0) {\r\n            this.status = 1;\r\n          }\r\n          return;\r\n        } else if (this.status === 1) {\r\n          if (this.hitRadius < this.x && this.x < GAME_AREA_WIDTH - this.hitRadius && this.hitRadius < this.y && this.y < GAME_AREA_HEIGHT - this.hitRadius) {\r\n            this.status = 2;\r\n          }\r\n        } else if (this.status === 2 || this.status === 3) {\r\n          if (this.x < -this.hitRadius || GAME_AREA_WIDTH + this.hitRadius < this.x || this.y < -this.hitRadius || GAME_AREA_HEIGHT + this.hitRadius < this.y) {\r\n            this.remove();\r\n            return;\r\n          }\r\n        }\r\n\r\n        if (this.moveRunner) {\r\n          this.bx = this.x;\r\n          this.by = this.y;\r\n          this.moveRunner.update();\r\n          this.x = this.moveRunner.x;\r\n          this.y = this.moveRunner.y;\r\n          if (this.rot) {\r\n            this.rotation = this.moveRunner.direction - Math.PI * 0.5;\r\n          }\r\n        }\r\n        if (this.bulletRunner) {\r\n          this.bulletRunner.x = this.x;\r\n          this.bulletRunner.y = this.y;\r\n          this.bulletRunner.update();\r\n        }\r\n        // this.flare(\"everyframe\");\r\n      });\r\n    },\r\n\r\n    spawn: function(options) {\r\n      // console.log(\"enemy spawn\", options);\r\n\r\n      passion.Sprite.prototype.spawn.call(this, options);\r\n      this.hp = options.hp || 0;\r\n      this.hitRadius = options.hitRadius || 24;\r\n\r\n      if (options.moveRunner) {\r\n        this.moveRunner = passion.Danmaku.createRunner(options.moveRunner);\r\n        this.moveRunner.x = this.x;\r\n        this.moveRunner.y = this.y;\r\n      }\r\n      if (options.bulletRunner) {\r\n        this.bulletRunner = passion.Danmaku.createRunner(options.bulletRunner);\r\n        this.bulletRunner.x = this.x;\r\n        this.bulletRunner.y = this.y;\r\n      }\r\n\r\n      this.hp = options.hp;\r\n      this.status = 0;\r\n      this.waitTime = options.wait || 0;\r\n      this.rot = options.rot || false;\r\n\r\n      this.on(\"damage\", function(e) {\r\n        var shot = e.shot;\r\n        this.hp -= shot.power;\r\n        if (this.hp <= 0) {\r\n          this.flare(\"killed\");\r\n        }\r\n      });\r\n      this.on(\"killed\", function(e) {\r\n        this.remove();\r\n      });\r\n\r\n      return this;\r\n    },\r\n\r\n    isHit: function(target) {\r\n      if (!target.visible || this.status != 2 || this.hp <= 0) return false;\r\n      return (this.x - target.x) * (this.x - target.x) + (this.y - target.y) * (this.y - target.y) < this.hitRadius * this.hitRadius;\r\n    },\r\n\r\n  });\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"passion.GLLayer\", {\r\n    superClass: \"phina.display.Layer\",\r\n\r\n    static: {\r\n      GL_CANVAS: null,\r\n      GL: null,\r\n    },\r\n\r\n    renderChildBySelf: true,\r\n    ready: false,\r\n\r\n    domElement: null,\r\n    gl: null,\r\n\r\n    camera: null,\r\n\r\n    bgDrawer: null,\r\n    enemyDrawer: null,\r\n    shotDrawer: null,\r\n    effectDrawer: null,\r\n    playerDrawer: null,\r\n    bulletDrawer: null,\r\n    topEffectDrawer: null,\r\n\r\n    init: function() {\r\n      this.superInit({\r\n        width: GAME_AREA_WIDTH,\r\n        height: GAME_AREA_HEIGHT,\r\n      });\r\n      this.originX = 0;\r\n      this.originY = 0;\r\n\r\n      if (passion.GLLayer.GL_CANVAS == null) {\r\n        passion.GLLayer.GL_CANVAS = document.createElement(\"canvas\");\r\n        passion.GLLayer.GL = passion.GLLayer.GL_CANVAS.getContext(\"webgl\");\r\n      }\r\n\r\n      this.domElement = passion.GLLayer.GL_CANVAS;\r\n      this.domElement.width = this.width * passion.GLLayer.quality;\r\n      this.domElement.height = this.height * passion.GLLayer.quality;\r\n\r\n      var gl = this.gl = passion.GLLayer.GL;\r\n      var extInstancedArrays = phigl.Extensions.getInstancedArrays(gl);\r\n\r\n      gl.viewport(0, 0, this.domElement.width, this.domElement.height);\r\n      gl.clearColor(0.0, 0.0, 0.0, 1.0);\r\n      gl.clearDepth(1.0);\r\n      gl.disable(gl.CULL_FACE);\r\n      gl.enable(gl.BLEND);\r\n      gl.disable(gl.DEPTH_TEST);\r\n\r\n      var cw = this.domElement.width;\r\n      var ch = this.domElement.height;\r\n      var w = this.width;\r\n      var h = this.height;\r\n      var sw = Math.pow(2, ~~Math.log2(cw) + 1);\r\n      var sh = Math.pow(2, ~~Math.log2(ch) + 1);\r\n\r\n      this.camera = passion.Camera()\r\n        .setPosition(w * 0.5, h * 0.5, 2000)\r\n        .lookAt(w * 0.5, h * 0.5, 0)\r\n        .ortho(-w * 0.5, w * 0.5, h * 0.5, -h * 0.5, 0.1, 3000)\r\n        .calcVpMatrix();\r\n\r\n      this.bgDrawer = passion.SpritDrawer(gl, extInstancedArrays, w, h);\r\n      this.enemyDrawer = passion.SpritDrawer(gl, extInstancedArrays, w, h);\r\n      this.shotDrawer = passion.SpritDrawer(gl, extInstancedArrays, w, h);\r\n      this.effectDrawer = passion.SpritDrawer(gl, extInstancedArrays, w, h);\r\n      this.playerDrawer = passion.SpritDrawer(gl, extInstancedArrays, w, h);\r\n      this.bulletDrawer = passion.BulletDrawer(gl, extInstancedArrays, w, h);\r\n      this.topEffectDrawer = passion.SpritDrawer(gl, extInstancedArrays, w, h);\r\n\r\n      this.ready = true;\r\n    },\r\n\r\n    update: function(app) {\r\n      if (!this.ready) return;\r\n\r\n      this.bgDrawer.update(app);\r\n      this.enemyDrawer.update(app);\r\n      this.shotDrawer.update(app);\r\n      this.effectDrawer.update(app);\r\n      this.playerDrawer.update(app);\r\n      this.bulletDrawer.update(app);\r\n      this.topEffectDrawer.update(app);\r\n    },\r\n\r\n    draw: function(canvas) {\r\n      if (!this.ready) return;\r\n\r\n      var gl = this.gl;\r\n      var image = this.domElement;\r\n      var cw = image.width;\r\n      var ch = image.height;\r\n\r\n      var ou = this.camera.uniformValues();\r\n\r\n      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n\r\n      this.bgDrawer.render(ou);\r\n      this.effectDrawer.render(ou);\r\n      this.enemyDrawer.render(ou);\r\n      this.shotDrawer.render(ou);\r\n      this.playerDrawer.render(ou);\r\n      this.bulletDrawer.render(ou);\r\n      this.topEffectDrawer.render(ou);\r\n\r\n      gl.flush();\r\n\r\n      var p = passion.GLLayer.padding;\r\n      canvas.context.drawImage(image,\r\n        0, 0, cw, ch,\r\n        this.width * p, this.height * p, this.width * (1 - p * 2), this.height * (1 - p * 2)\r\n      );\r\n    },\r\n\r\n    _static: {\r\n      // padding: 0.1,\r\n      // padding: 0.05,\r\n      padding: 0.01,\r\n      // quality: 0.5,\r\n      quality: 0.75,\r\n      // quality: 1.0,\r\n    },\r\n  });\r\n\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"passion.ParticleEmitter\", {\r\n    superClass: \"phina.display.Element\",\r\n\r\n    x: 0,\r\n    y: 0,\r\n\r\n    glLayer: null,\r\n    drawer: null,\r\n    objName: null,\r\n    spawnOptions: null,\r\n\r\n    genPerFrame: 0,\r\n\r\n    init: function(glLayer, drawer, objName, spawnOptions) {\r\n      this.superInit();\r\n      this.glLayer = glLayer;\r\n      this.drawer = drawer;\r\n      this.objName = objName;\r\n      this.spawnOptions = spawnOptions;\r\n    },\r\n\r\n    update: function(app) {\r\n      for (var i = 0; i < this.genPerFrame; i++) {\r\n        var p = this.drawer.get(this.objName);\r\n        if (p) {\r\n          p.spawn({}.$extend(this.spawnOptions, {\r\n            x: this.x,\r\n            y: this.y,\r\n          }));\r\n          p.addChildTo(this.glLayer);\r\n        } else {\r\n          break;\r\n        }\r\n      }\r\n    },\r\n  });\r\n\r\n  phina.define(\"passion.Particle\", {\r\n    superClass: \"passion.Sprite\",\r\n\r\n    init: function(id, instanceData, instanceStride) {\r\n      this.superInit(id, instanceData, instanceStride);\r\n      this.on(\"removed\", function() {\r\n        this.clear(\"enterframe\");\r\n        this.tweener.clear();\r\n      });\r\n    },\r\n\r\n  });\r\n\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"passion.Player\", {\r\n    superClass: \"passion.Sprite\",\r\n\r\n    _static: {\r\n      setup: function(glLayer) {\r\n        glLayer.playerDrawer.addObjType(\"player\", {\r\n          className: \"passion.Player\",\r\n          texture: \"texture0.png\",\r\n        });\r\n\r\n        var player = glLayer.playerDrawer.get(\"player\");\r\n        player.spawn();\r\n\r\n        player.on(\"enterframe\", function(e) {\r\n          if (e.app.ticker.frame % 2 !== 0) return;\r\n\r\n          var hex1 = glLayer.effectDrawer.get(\"effect\");\r\n          var hex2 = glLayer.effectDrawer.get(\"effect\");\r\n          var options = {\r\n            x: player.x - 8,\r\n            y: player.y + 15,\r\n            scaleX: 18,\r\n            scaleY: 18,\r\n            frameX: 7 / 8,\r\n            frameY: 0 / 8,\r\n            frameW: 1 / 8,\r\n            frameH: 1 / 8,\r\n            red: 1.0,\r\n            green: 1.0,\r\n            blue: 1.0,\r\n            alpha: 1.0,\r\n          };\r\n          var oefl = function() {\r\n            this.y += 2;\r\n            this.alpha *= 0.80;\r\n            if (this.alpha < 0.01) {\r\n              this.remove();\r\n            }\r\n          };\r\n\r\n          if (hex1) {\r\n            options.x = player.x - 8;\r\n            hex1.spawn(options);\r\n            hex1.onenterframe = oefl;\r\n            hex1.addChildTo(glLayer);\r\n          }\r\n\r\n          if (hex2) {\r\n            options.x = player.x + 8;\r\n            hex2.spawn(options);\r\n            hex2.onenterframe = oefl;\r\n            hex2.addChildTo(glLayer);\r\n          }\r\n        });\r\n\r\n        var aura = glLayer.effectDrawer.get(\"effect\");\r\n        aura.spawn({\r\n          scaleX: 80,\r\n          scaleY: 80,\r\n          frameX: 0 / 8,\r\n          frameY: 1 / 8,\r\n          frameW: 1 / 8,\r\n          frameH: 1 / 8,\r\n          red: 2.0,\r\n          green: 2.0,\r\n          blue: 2.0,\r\n          alpha: 0.2,\r\n        });\r\n        aura.addChildTo(glLayer);\r\n        aura.on(\"enterframe\", function() {\r\n          this.x = player.x;\r\n          this.y = player.y;\r\n        });\r\n\r\n        var centerMarker = glLayer.topEffectDrawer.get(\"effect\");\r\n        centerMarker.spawn({\r\n          scaleX: 14,\r\n          scaleY: 14,\r\n          frameX: 7 / 8,\r\n          frameY: 0 / 8,\r\n          frameW: 1 / 8,\r\n          frameH: 1 / 8,\r\n          red: 0.4,\r\n          green: 2.0,\r\n          blue: 1.6,\r\n          alpha: 1.0,\r\n        });\r\n        centerMarker.addChildTo(player);\r\n        centerMarker.on(\"enterframe\", function() {\r\n          this.x = player.x;\r\n          this.y = player.y;\r\n          this.rotation += 0.1;\r\n        });\r\n\r\n        return player;\r\n      },\r\n    },\r\n\r\n    _roll: 0,\r\n    heat: 0,\r\n    heatByShot: 0,\r\n\r\n    init: function(id, instanceData, instanceStride) {\r\n      this.superInit(id, instanceData, instanceStride);\r\n      this.on(\"enterframe\", function(e) {\r\n        this.controll(e.app);\r\n      });\r\n    },\r\n\r\n    spawn: function() {\r\n      passion.Sprite.prototype.spawn.call(this, {\r\n        scaleX: 75,\r\n        scaleY: 75,\r\n        frameX: 3 / 8,\r\n        frameY: 0 / 8,\r\n        frameW: 1 / 8,\r\n        frameH: 1 / 8,\r\n        red: 1.2,\r\n        green: 1.2,\r\n        blue: 1.2,\r\n      });\r\n      this.x = GAME_AREA_WIDTH * 0.5;\r\n      this.y = GAME_AREA_HEIGHT * 0.9;\r\n      return this;\r\n    },\r\n\r\n    controll: function(app) {\r\n      var p = app.pointer;\r\n      var dp = p.deltaPosition;\r\n\r\n      if (phina.isMobile() || (!phina.isMobile() && p.getPointing())) {\r\n        this.x += dp.x * 2;\r\n        this.y += dp.y * 2;\r\n        if (dp.x < 0) {\r\n          this.roll -= 0.2;\r\n        } else if (0 < dp.x) {\r\n          this.roll += 0.2;\r\n        }\r\n\r\n        this.x = Math.clamp(this.x, 5, GAME_AREA_WIDTH - 5);\r\n        this.y = Math.clamp(this.y, 40, GAME_AREA_HEIGHT - 5);\r\n      }\r\n\r\n      if (dp.x == 0) {\r\n        this.roll *= 0.9;\r\n        if (-0.01 < this.roll && this.roll < 0.01) {\r\n          this.roll = 0;\r\n        }\r\n      }\r\n      \r\n      if (app.pointers.length > 0 && this.heat <= 0) {\r\n        this.flare(\"fireShot\");\r\n        this.heat = this.heatByShot;\r\n      }\r\n\r\n      this.heat -= 1;\r\n    },\r\n\r\n    _accessor: {\r\n      roll: {\r\n        get: function() {\r\n          return this._roll;\r\n        },\r\n        set: function(v) {\r\n          this._roll = Math.clamp(v, -3, 3);\r\n          var r = ~~this._roll;\r\n          this.frameX = (r + 3) / 8;\r\n        },\r\n      },\r\n    },\r\n\r\n  });\r\n});\r\n","phina.namespace(function() {\r\n  \r\n  var SPEED = 20;\r\n  \r\n  phina.define(\"passion.Shot\", {\r\n    superClass: \"passion.Sprite\",\r\n    \r\n    bx: 0,\r\n    by: 0,\r\n    power: 0,\r\n    \r\n    init: function(id, instanceData, instanceStride) {\r\n      this.superInit(id, instanceData, instanceStride);\r\n      this.on(\"enterframe\", function(e) {\r\n        this.bx = this.x;\r\n        this.by = this.y;\r\n        this.controll(e.app);\r\n      });\r\n    },\r\n    \r\n    controll: function(app) {},\r\n    \r\n    onhit: function(e) {\r\n      this.remove();\r\n    },\r\n  });\r\n\r\n  phina.define(\"passion.NormalShot\", {\r\n    superClass: \"passion.Shot\",\r\n    \r\n    _static: {\r\n      heatByShot: 6,\r\n      fireCount: 3,\r\n    },\r\n    \r\n    init: function(id, instanceData, instanceStride) {\r\n      this.superInit(id, instanceData, instanceStride);\r\n      this.power = 1;\r\n    },\r\n    \r\n    spawn: function(player, index) {\r\n      passion.Shot.prototype.spawn.call(this, {\r\n        x: player.x + [-1, 1, 0][index] * 10,\r\n        y: player.y - 30,\r\n        rotation: -Math.PI * 0.5,\r\n        scaleX: 48,\r\n        scaleY: 48,\r\n        frameX: 1 / 8,\r\n        frameY: 1 / 8,\r\n        frameW: 1 / 8,\r\n        frameH: 1 / 8,\r\n        red: 1.0,\r\n        green: 1.0,\r\n        blue: 1.0,\r\n        alpha: 0.8,\r\n      });\r\n      return this;\r\n    },\r\n    \r\n    controll: function(app) {\r\n      this.y -= SPEED;\r\n      if (this.y < GAME_AREA_HEIGHT * -0.1) {\r\n        this.remove();\r\n      }\r\n    },\r\n  });\r\n\r\n  phina.define(\"passion.WideShot\", {\r\n    superClass: \"passion.Shot\",\r\n    \r\n    _static: {\r\n      heatByShot: 6,\r\n      fireCount: 3,\r\n    },\r\n    \r\n    init: function(id, instanceData, instanceStride) {\r\n      this.superInit(id, instanceData, instanceStride);\r\n      this.power = 1;\r\n    },\r\n    \r\n    spawn: function(player, index) {\r\n      passion.Shot.prototype.spawn.call(this, {\r\n        x: player.x + [-1, 1, 0][index] * 20,\r\n        y: player.y,\r\n        rotation: -Math.PI * 0.5 + [-1, 1, 0][index] * 0.2,\r\n        scaleX: 48,\r\n        scaleY: 48,\r\n        frameX: 1 / 8,\r\n        frameY: 1 / 8,\r\n        frameW: 1 / 8,\r\n        frameH: 1 / 8,\r\n        red: 1.0,\r\n        green: 1.0,\r\n        blue: 1.0,\r\n        alpha: 0.8,\r\n      });\r\n      \r\n      this.dx = Math.cos(this.rotation) * SPEED;\r\n      this.dy = Math.sin(this.rotation) * SPEED;\r\n      return this;\r\n    },\r\n    \r\n    controll: function(app) {\r\n      this.x += this.dx;\r\n      this.y += this.dy;\r\n      if (this.y < GAME_AREA_HEIGHT * -0.1 || this.x < GAME_AREA_WIDTH * -0.1 || GAME_AREA_WIDTH * 1.1 < this.x) {\r\n        this.remove();\r\n      }\r\n    },\r\n  });\r\n\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"passion.SpritDrawer\", {\r\n    superClass: \"phigl.InstancedDrawable\",\r\n\r\n    objTypes: null,\r\n    objParameters: null,\r\n\r\n    init: function(gl, ext, w, h) {\r\n      this.superInit(gl, ext);\r\n\r\n      this.objTypes = [];\r\n      this.objParameters = {};\r\n\r\n      var shader = phigl.Program(gl)\r\n        .attach(\"sprites.vs\")\r\n        .attach(\"sprites.fs\")\r\n        .link();\r\n\r\n      this\r\n        .setProgram(shader)\r\n        .setDrawMode(gl.TRIANGLE_STRIP)\r\n        .setIndexValues([0, 1, 2, 3])\r\n        .setAttributes(\"position\", \"uv\")\r\n        .setAttributeDataArray([{\r\n          unitSize: 2,\r\n          data: [\r\n            //\r\n            -0.5, +0.5,\r\n            //\r\n            +0.5, +0.5,\r\n            //\r\n            -0.5, -0.5,\r\n            //\r\n            +0.5, -0.5,\r\n          ]\r\n        }, {\r\n          unitSize: 2,\r\n          data: [\r\n            //\r\n            0, 1,\r\n            //\r\n            1, 1,\r\n            //\r\n            0, 0,\r\n            //\r\n            1, 0,\r\n          ]\r\n        }, ])\r\n        .setInstanceAttributes(\r\n          \"instanceVisible\",\r\n          \"instancePosition\",\r\n          \"instanceRotation\",\r\n          \"instanceScale\",\r\n          \"instanceFrame\",\r\n          \"instanceColor\"\r\n        )\r\n        .setUniforms(\r\n          \"vpMatrix\",\r\n          \"texture\",\r\n          \"globalScale\"\r\n        );\r\n\r\n      var instanceStride = this.instanceStride / 4;\r\n\r\n      this.uniforms.globalScale.setValue(1.0);\r\n    },\r\n\r\n    addObjType: function(objName, options) {\r\n      options = {}.$extend({\r\n        className: \"passion.Sprite\",\r\n        count: 1,\r\n        texture: null,\r\n        additiveBlending: false,\r\n      }, options);\r\n\r\n      if (!this.objTypes.contains(objName)) {\r\n        var self = this;\r\n        var instanceStride = this.instanceStride / 4;\r\n\r\n        this.objTypes.push(objName);\r\n        var objParameter = this.objParameters[objName] = {\r\n          count: options.count,\r\n          instanceVbo: phigl.Vbo(this.gl, this.gl.DYNAMIC_DRAW),\r\n          texture: phigl.Texture(this.gl, options.texture),\r\n          pool: null,\r\n          additiveBlending: options.additiveBlending,\r\n          instanceData: Array.range(options.count).map(function(i) {\r\n            return [\r\n              // visible\r\n              0,\r\n              // position\r\n              0, 0,\r\n              // rotation\r\n              0,\r\n              // scale\r\n              0, 0,\r\n              // frame\r\n              0, 0, 0, 0,\r\n              // rgba\r\n              0, 0, 0, 0,\r\n            ];\r\n          }).flatten(),\r\n        };\r\n\r\n        var ObjClass = phina.using(options.className);\r\n        objParameter.pool = Array.range(options.count).map(function(id) {\r\n          return ObjClass(id, objParameter.instanceData, instanceStride)\r\n            .on(\"removed\", function() {\r\n              objParameter.pool.push(this);\r\n            });\r\n        });\r\n      }\r\n    },\r\n\r\n    get: function(objName) {\r\n      return this.objParameters[objName].pool.shift();\r\n    },\r\n\r\n    update: function() {},\r\n\r\n    render: function(uniforms) {\r\n      if (this.objTypes.length === 0) return;\r\n\r\n      var gl = this.gl;\r\n      // gl.enable(gl.BLEND);\r\n      // gl.disable(gl.DEPTH_TEST);\r\n\r\n      this.uniforms.globalScale.value = 1.0;\r\n\r\n      if (uniforms) {\r\n        uniforms.forIn(function(key, value) {\r\n          if (this.uniforms[key]) this.uniforms[key].value = value;\r\n        }.bind(this));\r\n      }\r\n      var self = this;\r\n      this.objTypes.forEach(function(objName) {\r\n        var objParameter = self.objParameters[objName];\r\n\r\n        if (objParameter.additiveBlending) {\r\n          gl.blendFunc(gl.SRC_ALPHA, gl.ONE);\r\n        } else {\r\n          gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\r\n        }\r\n\r\n        self.setInstanceAttributeVbo(\r\n          objParameter.instanceVbo.set(objParameter.instanceData)\r\n        );\r\n        self.uniforms.texture.setValue(0).setTexture(objParameter.texture);\r\n        self.draw(objParameter.count);\r\n      });\r\n    },\r\n  });\r\n\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"passion.Sprite\", {\r\n    superClass: \"phina.app.Element\",\r\n\r\n    id: -1,\r\n    instanceData: null,\r\n\r\n    visible: true,\r\n\r\n    x: 0,\r\n    y: 0,\r\n    rotation: 0,\r\n    scale: 0,\r\n\r\n    frameX: 0,\r\n    frameY: 0,\r\n    frameW: 0,\r\n    frameH: 0,\r\n\r\n    red: 1.0,\r\n    green: 1.0,\r\n    blue: 1.0,\r\n    alpha: 1.0,\r\n\r\n    age: 0,\r\n\r\n    init: function(id, instanceData, instanceStride) {\r\n      this.superInit();\r\n      this.id = id;\r\n      this.instanceData = instanceData;\r\n      this.index = id * instanceStride;\r\n    },\r\n\r\n    spawn: function(options) {\r\n      options.$safe({\r\n        visible: true,\r\n        x: 0,\r\n        y: 0,\r\n        rotation: 0,\r\n        scaleX: 1,\r\n        scaleY: 1,\r\n        frameX: 0,\r\n        frameY: 0,\r\n        frameW: 1 / 8,\r\n        frameH: 1 / 8,\r\n        red: 1.0,\r\n        green: 1.0,\r\n        blue: 1.0,\r\n        alpha: 1.0,\r\n      });\r\n\r\n      var index = this.index;\r\n      var instanceData = this.instanceData;\r\n\r\n      this.visible = options.visible;\r\n      this.x = options.x;\r\n      this.y = options.y;\r\n      this.rotation = options.rotation;\r\n      this.scaleX = options.scaleX;\r\n      this.scaleY = options.scaleY;\r\n      this.frameX = options.frameX;\r\n      this.frameY = options.frameY;\r\n      this.frameW = options.frameW;\r\n      this.frameH = options.frameH;\r\n      this.red = options.red;\r\n      this.green = options.green;\r\n      this.blue = options.blue;\r\n      this.alpha = options.alpha;\r\n\r\n      instanceData[index + 0] = this.visible ? 1 : 0; // visible\r\n      instanceData[index + 1] = this.x; // position.x\r\n      instanceData[index + 2] = this.y; // position.y\r\n      instanceData[index + 3] = this.rotation; // rotation\r\n      instanceData[index + 4] = this.scaleX; // scale\r\n      instanceData[index + 5] = this.scaleY; // scale\r\n      instanceData[index + 6] = this.frameX; // frame.x\r\n      instanceData[index + 7] = this.frameY; // frame.y\r\n      instanceData[index + 8] = this.frameW; // frame.w\r\n      instanceData[index + 9] = this.frameH; // frame.h\r\n      instanceData[index + 10] = this.red; // red\r\n      instanceData[index + 11] = this.green; // green\r\n      instanceData[index + 12] = this.blue; // blue\r\n      instanceData[index + 13] = this.alpha; // alpha\r\n\r\n      this.age = 0;\r\n\r\n      return this;\r\n    },\r\n\r\n    update: function(app) {\r\n      var index = this.index;\r\n      var instanceData = this.instanceData;\r\n\r\n      instanceData[index + 0] = this.visible ? 1 : 0; // visible\r\n      instanceData[index + 1] = this.x; // position.x\r\n      instanceData[index + 2] = this.y; // position.y\r\n      instanceData[index + 3] = this.rotation; // rotation\r\n      instanceData[index + 4] = this.scaleX; // scale\r\n      instanceData[index + 5] = this.scaleY; // scale\r\n      instanceData[index + 6] = this.frameX; // frame.x\r\n      instanceData[index + 7] = this.frameY; // frame.y\r\n      instanceData[index + 8] = this.frameW; // frame.w\r\n      instanceData[index + 9] = this.frameH; // frame.h\r\n      instanceData[index + 10] = this.red; // red\r\n      instanceData[index + 11] = this.green; // green\r\n      instanceData[index + 12] = this.blue; // blue\r\n      instanceData[index + 13] = this.alpha; // alpha\r\n\r\n      this.age += 1;\r\n    },\r\n\r\n    onremoved: function() {\r\n      this.visible = false;\r\n      this.instanceData[this.index + 0] = 0;\r\n    },\r\n  });\r\n\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"passion.UIFrame\", {\r\n    superClass: \"phina.display.Shape\",\r\n\r\n    init: function(options) {\r\n      this.superInit(options);\r\n      this.backgroundColor = \"transparent\";\r\n      this.strokeWidth = 2;\r\n    },\r\n\r\n    prerender: function(canvas) {\r\n      var c = canvas.context;\r\n\r\n      c.beginPath();\r\n      c.moveTo(-this.width / 2 + 10, -this.height / 2);\r\n      c.lineTo(this.width / 2 - 5, -this.height / 2);\r\n      c.lineTo(this.width / 2, -this.height / 2 + 5);\r\n      c.lineTo(this.width / 2, this.height / 2 - 10);\r\n      c.lineTo(this.width / 2 - 10, this.height / 2);\r\n      c.lineTo(-this.width / 2 + 35, this.height / 2);\r\n      c.lineTo(-this.width / 2 + 30, this.height / 2 - 5);\r\n      c.lineTo(-this.width / 2, this.height / 2 - 5);\r\n      c.lineTo(-this.width / 2, 10 - this.height / 2);\r\n      c.closePath();\r\n\r\n      var sg = c.createLinearGradient(this.height / 2, -this.width / 2, -this.height / 2, this.width / 2);\r\n      sg.addColorStop(0.00, \"hsla(190, 100%, 30%, 0.8)\");\r\n      sg.addColorStop(0.38, \"hsla(190, 100%, 30%, 0.8)\");\r\n      sg.addColorStop(0.48, \"hsla(190, 100%, 80%, 0.8)\");\r\n      sg.addColorStop(0.52, \"hsla(190, 100%, 80%, 0.8)\");\r\n      sg.addColorStop(0.62, \"hsla(190, 100%, 30%, 0.8)\");\r\n      sg.addColorStop(1.00, \"hsla(190, 100%, 30%, 0.8)\");\r\n      this.stroke = sg;\r\n\r\n      var fg = c.createLinearGradient(this.height / 2, -this.width / 2, -this.height / 2, this.width / 2);\r\n      fg.addColorStop(0.00, \"hsla(210, 100%, 30%, 0.2)\");\r\n      fg.addColorStop(0.38, \"hsla(210, 100%, 30%, 0.2)\");\r\n      fg.addColorStop(0.48, \"hsla(210, 100%, 80%, 0.2)\");\r\n      fg.addColorStop(0.52, \"hsla(210, 100%, 80%, 0.2)\");\r\n      fg.addColorStop(0.62, \"hsla(210, 100%, 30%, 0.2)\");\r\n      fg.addColorStop(1.00, \"hsla(210, 100%, 30%, 0.2)\");\r\n      this.fill = fg;\r\n    },\r\n\r\n    postrender: function(canvas) {\r\n      var c = canvas.context;\r\n\r\n      c.beginPath();\r\n      c.moveTo(-this.width / 2 + 10 - 3, -this.height / 2 - 3);\r\n      c.lineTo(this.width / 2 - 5 + 3, -this.height / 2 - 3);\r\n      c.lineTo(this.width / 2 + 3, -this.height / 2 + 5 - 3);\r\n      c.lineTo(this.width / 2 + 3, this.height / 2 - 10 + 3);\r\n      c.lineTo(this.width / 2 - 10 + 3, this.height / 2 + 3);\r\n      c.lineTo(-this.width / 2 + 35 - 3, this.height / 2 + 3);\r\n      c.lineTo(-this.width / 2 + 30 - 3, this.height / 2 - 5 + 3);\r\n      c.lineTo(-this.width / 2 - 3, this.height / 2 - 5 + 3);\r\n      c.lineTo(-this.width / 2 - 3, -this.height / 2 + 10 - 3);\r\n      c.closePath();\r\n\r\n      c.lineWidth = 1;\r\n      c.stroke();\r\n    },\r\n\r\n  });\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"passion.UIHeadLabel\", {\r\n    superClass: \"phina.display.Shape\",\r\n\r\n    init: function(options) {\r\n      this.superInit(options);\r\n      this.backgroundColor = \"transparent\";\r\n      this.stroke = \"hsla(190, 100%, 60%, 1.0)\";\r\n      this.strokeWidth = 1;\r\n      this.fromJSON({\r\n        children: {\r\n          text: {\r\n            className: \"phina.display.Label\",\r\n            arguments: {\r\n              text: options.text,\r\n              fontSize: options.fontSize || 24,\r\n              // fontWeight: \"bold\",\r\n              fontFamily: options.fontFamily || \"main\",\r\n              align: options.align || \"center\",\r\n            },\r\n            fill: \"hsla(190, 100%, 95%, 0.8)\",\r\n            strokeWidth: 0,\r\n          },\r\n        },\r\n      });\r\n    },\r\n\r\n    prerender: function(canvas) {\r\n      var c = canvas.context;\r\n      var fg = c.createLinearGradient(0, -this.height / 2, 0, this.height / 2);\r\n      fg.addColorStop(0.00, \"hsla(190, 100%, 50%, 0.2)\");\r\n      fg.addColorStop(0.40, \"hsla(190, 100%, 30%, 0.2)\");\r\n      fg.addColorStop(0.60, \"hsla(190, 100%, 30%, 0.2)\");\r\n      fg.addColorStop(1.00, \"hsla(190, 100%, 50%, 0.2)\");\r\n      this.fill = fg;\r\n    },\r\n\r\n    postrender: function(canvas) {\r\n      var c = canvas.context;\r\n\r\n      c.beginPath();\r\n      c.moveTo(-this.width / 2, this.height / 2);\r\n      c.lineTo(-this.width / 2, -this.height / 2 + 10);\r\n      c.lineTo(-this.width / 2 + 10, -this.height / 2);\r\n      c.lineTo(this.width / 2, -this.height / 2);\r\n      c.lineTo(this.width / 2, this.height / 2 - 10);\r\n      c.lineTo(this.width / 2 - 10, this.height / 2);\r\n      c.closePath();\r\n      c.fill();\r\n\r\n      c.beginPath();\r\n      c.moveTo(-this.width / 2, this.height / 2);\r\n      c.lineTo(-this.width / 2, -this.height / 2 + 10);\r\n      c.lineTo(-this.width / 2 + 10, -this.height / 2);\r\n      c.stroke();\r\n\r\n      c.beginPath();\r\n      c.moveTo(this.width / 2, -this.height / 2);\r\n      c.lineTo(this.width / 2, this.height / 2 - 10);\r\n      c.lineTo(this.width / 2 - 10, this.height / 2);\r\n      c.stroke();\r\n    },\r\n\r\n  });\r\n});\r\n\r\nphina.namespace(function() {\r\n\r\n  phina.define(\"passion.UIHead2Label\", {\r\n    superClass: \"phina.display.Shape\",\r\n\r\n    init: function(options) {\r\n      this.superInit(options);\r\n      this.backgroundColor = \"transparent\";\r\n      this.strokeWidth = 1;\r\n      this.fromJSON({\r\n        children: {\r\n          text: {\r\n            className: \"phina.display.Label\",\r\n            arguments: {\r\n              text: options.text,\r\n              fontSize: options.fontSize || 24,\r\n              // fontWeight: \"bold\",\r\n              fontFamily: options.fontFamily || \"main\",\r\n              align: options.align || \"center\",\r\n            },\r\n            fill: \"hsla(190, 100%, 95%, 0.8)\",\r\n            strokeWidth: 0,\r\n          },\r\n        },\r\n      });\r\n    },\r\n\r\n    prerender: function(canvas) {\r\n      var c = canvas.context;\r\n\r\n      var fg = c.createLinearGradient(0, -this.height / 2, 0, this.height / 2);\r\n      fg.addColorStop(0.00, \"hsla(190, 100%, 50%, 0.2)\");\r\n      fg.addColorStop(0.40, \"hsla(190, 100%, 30%, 0.2)\");\r\n      fg.addColorStop(0.60, \"hsla(190, 100%, 30%, 0.2)\");\r\n      fg.addColorStop(1.00, \"hsla(190, 100%, 50%, 0.2)\");\r\n      this.fill = fg;\r\n\r\n      var sg = c.createLinearGradient(-this.width / 2, 0, this.width / 2, 0);\r\n      sg.addColorStop(0.00, \"hsla(190, 100%, 60%, 0.0)\");\r\n      sg.addColorStop(0.30, \"hsla(190, 100%, 60%, 1.0)\");\r\n      sg.addColorStop(0.70, \"hsla(190, 100%, 60%, 1.0)\");\r\n      sg.addColorStop(1.00, \"hsla(190, 100%, 60%, 0.0)\");\r\n      this.stroke = sg;\r\n    },\r\n\r\n    postrender: function(canvas) {\r\n      var c = canvas.context;\r\n\r\n      c.beginPath();\r\n      c.moveTo(-this.width / 2, this.height / 2);\r\n      c.lineTo(-this.width / 2, -this.height / 2);\r\n      c.lineTo(this.width / 2, -this.height / 2);\r\n      c.lineTo(this.width / 2, this.height / 2);\r\n      c.closePath();\r\n      c.fill();\r\n\r\n      c.beginPath();\r\n      c.moveTo(-this.width / 2, this.height / 2);\r\n      c.lineTo(this.width / 2, this.height / 2);\r\n      c.stroke();\r\n\r\n      c.beginPath();\r\n      c.moveTo(-this.width / 2, -this.height / 2);\r\n      c.lineTo(this.width / 2, -this.height / 2);\r\n      c.stroke();\r\n    },\r\n\r\n  });\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"passion.UILayer\", {\r\n    superClass: \"phina.display.DisplayElement\",\r\n\r\n    init: function(gameManager) {\r\n      this.superInit();\r\n      this.fromJSON({\r\n        originX: 0,\r\n        originY: 0,\r\n        children: {\r\n          damage: {\r\n            className: \"phina.display.Sprite\",\r\n            arguments: this.damageTexture(),\r\n            originX: 0,\r\n            originY: 0,\r\n            alpha: 0.0,\r\n            x: GAME_AREA_WIDTH * passion.GLLayer.padding,\r\n            y: GAME_AREA_HEIGHT * passion.GLLayer.padding,\r\n          },\r\n          scoreBg: {\r\n            className: \"passion.UIFrame\",\r\n            arguments: {\r\n              width: SCREEN_WIDTH * 0.96,\r\n              height: SCREEN_HEIGHT * 0.05,\r\n            },\r\n            x: SCREEN_WIDTH * 0.00,\r\n            y: SCREEN_HEIGHT * 0.00,\r\n            originX: 0,\r\n            originY: 0,\r\n            children: {\r\n              scoreLabel: {\r\n                className: \"phina.display.Label\",\r\n                arguments: {\r\n                  text: \"9,991,234,567,890\",\r\n                  align: \"right\",\r\n                  baseline: \"middle\",\r\n                  fontSize: SCREEN_HEIGHT * 0.035,\r\n                },\r\n                x: SCREEN_WIDTH * 0.96,\r\n                y: SCREEN_HEIGHT * 0.038,\r\n              },\r\n              hi: {\r\n                className: \"phina.display.Label\",\r\n                arguments: {\r\n                  text: \"HI\",\r\n                  align: \"left\",\r\n                  baseline: \"middle\",\r\n                  fontSize: SCREEN_HEIGHT * 0.025,\r\n                },\r\n                x: SCREEN_WIDTH * 0.04,\r\n                y: SCREEN_HEIGHT * 0.035,\r\n              },\r\n              highscoreLabel: {\r\n                className: \"phina.display.Label\",\r\n                arguments: {\r\n                  text: \"9,991,234,567,890\",\r\n                  align: \"right\",\r\n                  baseline: \"middle\",\r\n                  fontSize: SCREEN_HEIGHT * 0.025,\r\n                },\r\n                x: SCREEN_WIDTH * 0.44,\r\n                y: SCREEN_HEIGHT * 0.035,\r\n              },\r\n            },\r\n          },\r\n          messageWindow: {\r\n            className: \"passion.UIFrame\",\r\n            arguments: {\r\n              width: SCREEN_WIDTH * 0.96,\r\n              height: SCREEN_HEIGHT * 0.14,\r\n            },\r\n            x: SCREEN_WIDTH * 0.0,\r\n            y: SCREEN_HEIGHT * 0.84,\r\n            originX: 0,\r\n            originY: 0,\r\n            // visible: false,\r\n            children: {\r\n              nameLabel: {\r\n                className: \"passion.UIHead2Label\",\r\n                arguments: {\r\n                  text: \"オペ子\",\r\n                  width: SCREEN_WIDTH * 0.30,\r\n                  height: SCREEN_HEIGHT * 0.03,\r\n                  fontSize: 18,\r\n                  fontFamily: \"main, message\",\r\n                },\r\n                x: SCREEN_WIDTH * 0.20,\r\n                y: SCREEN_HEIGHT * 0.034,\r\n                visible: false,\r\n              },\r\n              mesasgeLabel: {\r\n                className: \"phina.display.Label\",\r\n                arguments: {\r\n                  text: \"WARNING!!\\n今までにない強大な力が近づいてきます！\\n気をつけてください！！\",\r\n                  align: \"left\",\r\n                  baseline: \"top\",\r\n                  fontSize: 16,\r\n                  lineHeight: 1.1,\r\n                  fontFamily: \"main, message\",\r\n                },\r\n                x: SCREEN_WIDTH * 0.05,\r\n                y: SCREEN_HEIGHT * 0.076,\r\n                visible: false,\r\n              },\r\n            },\r\n          },\r\n          bombButton: {\r\n            className: \"passion.CircleButton\",\r\n            arguments: {\r\n              text: \"BOMB\",\r\n              fontSize: 15,\r\n              radius: GAME_AREA_WIDTH * 0.09,\r\n            },\r\n            x: GAME_AREA_WIDTH * 0.12,\r\n            y: GAME_AREA_HEIGHT * 0.92,\r\n            // y: GAME_AREA_HEIGHT * 1.085,\r\n          },\r\n        },\r\n      });\r\n\r\n      var self = this;\r\n      gameManager.on(\"updateScore\", function() {\r\n        self.scoreBg.scoreLabel.text = passion.Utils.sep(this.score);\r\n        if (this.highScore < this.score) {\r\n          self.scoreBg.highscoreLabel.text = passion.Utils.sep(this.highScore);\r\n        }\r\n      });\r\n      gameManager.on(\"damage\", function(e) {});\r\n    },\r\n\r\n    damageTexture: function() {\r\n      var c = phina.graphics.Canvas();\r\n      var p = passion.GLLayer.padding;\r\n      c.setSize(GAME_AREA_WIDTH * (1 - p * 2), GAME_AREA_HEIGHT * (1 - p * 2));\r\n      c.clearColor(\"transparent\");\r\n      var g = c.context.createRadialGradient(c.width / 2, c.height / 2, 0, c.width / 2, c.height / 2, c.height / 2)\r\n      g.addColorStop(0, \"rgba(255, 0, 0, 0.0)\");\r\n      g.addColorStop(1, \"rgba(255, 0, 0, 1.0)\");\r\n      c.fillStyle = g;\r\n      c.fillRect(0, 0, c.width, c.height);\r\n      return c;\r\n    },\r\n\r\n  });\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"passion.GameSceneBg\", {\r\n    _static: {\r\n      drawBgTexture: function() {\r\n        var bgTexture = phina.graphics.Canvas();\r\n        bgTexture.setSize(SCREEN_WIDTH, SCREEN_HEIGHT);\r\n        bgTexture.clearColor(\"hsla(190, 100%, 95%, 0.05)\");\r\n        (150).times(function(i, j) {\r\n          var y = (SCREEN_HEIGHT * 1.5) / j * i;\r\n          bgTexture.strokeStyle = \"hsla(190, 100%, 95%, 0.1)\";\r\n          bgTexture.strokeLines(\r\n            SCREEN_WIDTH * 0.0, y - 10,\r\n            SCREEN_WIDTH * 0.1, y - 10,\r\n            SCREEN_WIDTH * 0.2, y + 20,\r\n            SCREEN_WIDTH * 0.5, y + 20,\r\n            SCREEN_WIDTH * 0.6, y - 30,\r\n            SCREEN_WIDTH * 0.7, y - 30,\r\n            SCREEN_WIDTH * 0.8, y - 50,\r\n            SCREEN_WIDTH * 1.0, y - 50\r\n          );\r\n          bgTexture.strokeStyle = \"hsla(190, 100%, 65%, 0.1)\";\r\n          y += 1;\r\n          bgTexture.strokeLines(\r\n            SCREEN_WIDTH * 0.0, y - 10,\r\n            SCREEN_WIDTH * 0.1, y - 10,\r\n            SCREEN_WIDTH * 0.2, y + 20,\r\n            SCREEN_WIDTH * 0.5, y + 20,\r\n            SCREEN_WIDTH * 0.6, y - 30,\r\n            SCREEN_WIDTH * 0.7, y - 30,\r\n            SCREEN_WIDTH * 0.8, y - 50,\r\n            SCREEN_WIDTH * 1.0, y - 50\r\n          );\r\n          bgTexture.strokeStyle = \"hsla(190, 100%, 35%, 0.1)\";\r\n          y += 1;\r\n          bgTexture.strokeLines(\r\n            SCREEN_WIDTH * 0.0, y - 10,\r\n            SCREEN_WIDTH * 0.1, y - 10,\r\n            SCREEN_WIDTH * 0.2, y + 20,\r\n            SCREEN_WIDTH * 0.5, y + 20,\r\n            SCREEN_WIDTH * 0.6, y - 30,\r\n            SCREEN_WIDTH * 0.7, y - 30,\r\n            SCREEN_WIDTH * 0.8, y - 50,\r\n            SCREEN_WIDTH * 1.0, y - 50\r\n          );\r\n        });\r\n        return bgTexture;\r\n      },\r\n    },\r\n\r\n    init: function() {},\r\n  });\r\n\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"passion.GameManager\", {\r\n    superClass: \"phina.util.EventDispatcher\",\r\n\r\n    score: 0,\r\n    highScore: 0,\r\n\r\n    frame: 0,\r\n    waitTo: 0,\r\n\r\n    timeline: null,\r\n\r\n    init: function(stageData) {\r\n      this.superInit();\r\n      this.timeline = stageData.timeline;\r\n      this.waitTo = -1;\r\n    },\r\n\r\n    update: function(app) {\r\n      while ((this.waitTo === this.frame || this.waitTo === -1) && this.timeline.length > 0) {\r\n        this.waitTo = -1;\r\n        var task = this.timeline.shift();\r\n\r\n        console.log(\"[task] \" + this.frame + \" \" + task.type);\r\n\r\n        this[task.type](task.arguments);\r\n      }\r\n\r\n      this.frame += 1;\r\n    },\r\n\r\n    startBgm: function(arg) {\r\n\r\n    },\r\n\r\n    stopBgm: function() {},\r\n\r\n    wait: function(arg) {\r\n      this.waitTo = this.frame + arg.time;\r\n    },\r\n\r\n    enemy: function(arg) {\r\n      this.flare(\"spawnEnemy\", arg);\r\n    },\r\n\r\n    enemyGroup: function(arg) {\r\n      for (var i = 0; i < arg.count; i++) {\r\n        this.flare(\"spawnEnemy\", {}.$extend(arg.enemy, {\r\n          x: (arg.enemy.x || 0) + (arg.dx || 0) * i,\r\n          y: (arg.enemy.y || 0) + (arg.dy || 0) * i,\r\n          wait: (arg.enemy.wait || 0) + (arg.dwait || 0) * i,\r\n        }));\r\n      }\r\n    },\r\n\r\n    warning: function(arg) {},\r\n\r\n    boss: function(arg) {},\r\n\r\n  });\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"passion.Pool\", {\r\n\r\n    array: null,\r\n    dirty: null,\r\n    comparator: null,\r\n\r\n    init: function(array, comparator) {\r\n      this.array = array || [];\r\n      this.comparator = comparator || function(lhs, rhs) {\r\n        return lhs - rhs;\r\n      };\r\n      this.dirty = true;\r\n    },\r\n\r\n    add: function(obj) {\r\n      this.array.push(obj);\r\n      this.dirty = true;\r\n    },\r\n\r\n    get: function() {\r\n      if (this.dirty) {\r\n        this.array.sort(this.comparator);\r\n        this.dirty = false;\r\n      }\r\n      return this.array.shift();\r\n    },\r\n  });\r\n\r\n  Array.prototype.$method(\"toPool\", function(comparator) {\r\n    return passion.Pool(this, comparator);\r\n  });\r\n\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"passion.GameScene\", {\r\n    superClass: \"phina.display.DisplayScene\",\r\n\r\n    random: null,\r\n    gameManager: null,\r\n\r\n    shots: null,\r\n    enemies: null,\r\n    bullets: null,\r\n    items: null,\r\n\r\n    init: function(options) {\r\n      this.superInit(options);\r\n\r\n      var self = this;\r\n      var stageData = phina.asset.AssetManager.get(\"json\", \"stage\").data;\r\n\r\n      this.random = phina.util.Random(12345);\r\n      this.gameManager = passion.GameManager(stageData);\r\n\r\n      this.fromJSON({\r\n        shots: [],\r\n        enemies: [],\r\n        bullets: [],\r\n        items: [],\r\n        children: {\r\n          bg: {\r\n            className: \"phina.display.Sprite\",\r\n            arguments: passion.GameSceneBg.drawBgTexture(),\r\n            originX: 0,\r\n            originY: 0,\r\n          },\r\n          glLayer: {\r\n            className: \"passion.GLLayer\",\r\n          },\r\n          uiLayer: {\r\n            className: \"passion.UILayer\",\r\n            arguments: this.gameManager,\r\n            alpha: 0,\r\n          },\r\n        },\r\n      });\r\n\r\n      this.uiLayer.tweener.clear().fadeIn(500);\r\n\r\n      var gameManager = this.gameManager;\r\n\r\n      var glLayer = this.glLayer;\r\n\r\n      glLayer.effectDrawer.addObjType(\"effect\", {\r\n        texture: \"texture0.png\",\r\n        additiveBlending: true,\r\n        count: 200,\r\n      });\r\n      glLayer.topEffectDrawer.addObjType(\"bullets_erase\", {\r\n        className: \"passion.BulletEraseEffect\",\r\n        texture: \"bullets_erase.png\",\r\n        count: 200,\r\n      });\r\n      glLayer.topEffectDrawer.addObjType(\"effect\", {\r\n        texture: \"texture0.png\",\r\n        count: 2,\r\n      });\r\n\r\n      // 背景\r\n      passion.Background.setup(glLayer, \"bg\", 1069);\r\n\r\n      // 自機\r\n      var player = this.player = passion.Player.setup(glLayer).addChildTo(glLayer);\r\n\r\n      // ショット\r\n      var shotClassName = \"passion.WideShot\";\r\n      glLayer.shotDrawer.addObjType(\"shot\", {\r\n        className: shotClassName,\r\n        texture: \"bullets.png\",\r\n        count: 50,\r\n      });\r\n      var ShotClass = phina.using(shotClassName);\r\n      player.heatByShot = ShotClass.heatByShot;\r\n      var shots = this.shots;\r\n      player.on(\"fireShot\", function(e) {\r\n        for (var i = 0; i < ShotClass.fireCount; i++) {\r\n          var s = glLayer.shotDrawer.get(\"shot\");\r\n          if (s) {\r\n            s.spawn(this, i).addChildTo(glLayer);\r\n            shots.push(s);\r\n          }\r\n        }\r\n      });\r\n      glLayer.shotDrawer.objParameters[\"shot\"].pool.forEach(function(shot) {\r\n        shot.on(\"removed\", function() {\r\n          var effect = glLayer.topEffectDrawer.get(\"bullets_erase\");\r\n          if (effect) {\r\n            effect\r\n              .spawn({\r\n                x: this.x,\r\n                y: this.y,\r\n                frameY: 1 / 8,\r\n              })\r\n              .addChildTo(glLayer);\r\n          }\r\n          shots.erase(this);\r\n        });\r\n      });\r\n\r\n      // 敵\r\n      stageData.enemies\r\n        .map(function(enemy) {\r\n          return phina.asset.AssetManager.get(\"json\", enemy + \".enemy\").data;\r\n        })\r\n        .map(function(enemyData) {\r\n          return enemyData.texture;\r\n        })\r\n        .uniq()\r\n        .forEach(function(textureName) {\r\n          glLayer.enemyDrawer.addObjType(textureName, {\r\n            className: \"passion.Enemy\",\r\n            texture: textureName,\r\n            count: 50,\r\n          });\r\n          glLayer.enemyDrawer.objParameters[textureName].pool.forEach(function(enemy) {\r\n            enemy.on(\"removed\", function() {\r\n              enemies.erase(this);\r\n            });\r\n          });\r\n        });\r\n      var enemies = this.enemies;\r\n      gameManager.on(\"spawnEnemy\", function(e) {\r\n        var enemyData = phina.asset.AssetManager.get(\"json\", e.name + \".enemy\").data;\r\n        var enemy = glLayer.enemyDrawer.get(enemyData.texture)\r\n        if (enemy) {\r\n          enemy.spawn({}.$extend(enemyData, e, { x: e.x * GAME_AREA_WIDTH, y: e.y * GAME_AREA_HEIGHT }));\r\n          enemy.addChildTo(glLayer);\r\n          enemies.push(enemy);\r\n        }\r\n      });\r\n\r\n      // 弾\r\n      passion.Danmaku.setup(this);\r\n      var bullets = this.bullets;\r\n      this.on(\"spawnBullet\", function(e) {\r\n        var bullet = e.bullet;\r\n        bullet.addChildTo(glLayer);\r\n        bullets.push(bullet);\r\n      });\r\n      glLayer.bulletDrawer.pool.array.forEach(function(bullet) {\r\n        bullet.on(\"removed\", function() {\r\n          bullets.erase(this);\r\n        });\r\n        bullet.on(\"erased\", function() {\r\n          var effect = glLayer.topEffectDrawer.get(\"bullets_erase\");\r\n          if (effect) {\r\n            effect\r\n              .spawn({\r\n                x: this.x,\r\n                y: this.y,\r\n                frameY: 0,\r\n              })\r\n              .addChildTo(glLayer);\r\n          }\r\n        });\r\n      });\r\n    },\r\n\r\n    update: function(app) {\r\n      this.gameManager.update(app);\r\n      this._hitTest();\r\n    },\r\n\r\n    _hitTest: function() {\r\n      this._hitTestItemPlayer();\r\n      this._hitTestEnemyShot();\r\n      this._hitTestEnemyPlayer();\r\n      this._hitTestBulletPlayer();\r\n    },\r\n\r\n    _hitTestItemPlayer: function() {},\r\n\r\n    _hitTestEnemyShot: function() {\r\n      var es = this.enemies.clone();\r\n      var ss = this.shots.clone();\r\n      for (var i = 0; i < es.length; i++) {\r\n        var e = es[i];\r\n        for (var j = 0; j < ss.length; j++) {\r\n          var s = ss[j];\r\n          if (e.isHit(s)) {\r\n            e.flare(\"damage\", { shot: s });\r\n            s.flare(\"hit\");\r\n          }\r\n        }\r\n      }\r\n    },\r\n\r\n    _hitTestEnemyPlayer: function() {\r\n      var es = this.enemies.clone();\r\n      var p = this.player;\r\n      for (var i = 0; i < es.length; i++) {\r\n        if (es[i].isHit(p)) {\r\n          es[i].remove();\r\n        }\r\n      }\r\n    },\r\n\r\n    _hitTestBulletPlayer: function() {\r\n      var bs = this.bullets.clone();\r\n      var p = this.player;\r\n      for (var i = 0; i < bs.length; i++) {\r\n        if (bs[i].isHit(p)) {\r\n          bs[i].remove();\r\n        }\r\n      }\r\n    },\r\n\r\n    eraseAllBullets: function() {\r\n      this.bullets.clone().forEach(function(bullet) {\r\n        bullet.flare(\"erased\");\r\n        bullet.remove();\r\n      });\r\n    },\r\n\r\n    onspawnItem: function(e) {\r\n      var item = e.item;\r\n      item.addChildTo(this.glLayer);\r\n      this.items.push(item);\r\n    },\r\n\r\n  });\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"passion.StageAssetLoadScene\", {\r\n    superClass: \"phina.display.DisplayScene\",\r\n\r\n    init: function(options) {\r\n      this.superInit(options);\r\n\r\n      this.fromJSON({\r\n        children: {\r\n          bg0: {\r\n            className: \"phina.display.Sprite\",\r\n            arguments: passion.GameSceneBg.drawBgTexture(),\r\n            originX: 0,\r\n            originY: 0,\r\n          },\r\n          bg1: {\r\n            className: \"phina.display.RectangleShape\",\r\n            arguments: {\r\n              fill: \"black\",\r\n              stroke: null,\r\n              width: SCREEN_WIDTH,\r\n              height: SCREEN_HEIGHT * 0.1,\r\n            },\r\n            x: SCREEN_WIDTH * 0.5,\r\n            y: SCREEN_HEIGHT * 0.5,\r\n          },\r\n          label: {\r\n            className: \"phina.display.Label\",\r\n            arguments: {\r\n              text: \"\",\r\n            },\r\n            x: SCREEN_WIDTH * 0.5,\r\n            y: SCREEN_HEIGHT * 0.5,\r\n            alpha: 0,\r\n          },\r\n        },\r\n      });\r\n\r\n      var stageName = options.stage;\r\n\r\n      var loader = phina.asset.AssetLoader();\r\n      loader.load({\r\n        json: { \"stage\": \"./asset/stage/\" + stageName + \".json\" }\r\n      });\r\n      this.label.tweener.fadeIn(1000);\r\n      loader.on(\"load\", function() {\r\n        this.step1();\r\n      }.bind(this));\r\n\r\n      this.label.text = \"step0\";\r\n    },\r\n\r\n    update: function(app) {\r\n      var t = Math.floor(app.ticker.frame * 0.1) % 4;\r\n      var s = \"downloading\";\r\n      t.times(function() { s += \".\" });\r\n      s.paddingRight(\"downloading\".length + 3, \" \");\r\n      // this.label.text = s;\r\n    },\r\n\r\n    step1: function() {\r\n      var stageData = phina.asset.AssetManager.get(\"json\", \"stage\").data;\r\n      // console.log(stageData);\r\n\r\n      var enemies = {};\r\n      stageData.enemies.forEach(function(enemy) {\r\n        enemies[enemy + \".enemy\"] = \"./asset/enemy/\" + enemy + \".json\";\r\n      });\r\n\r\n      var loader = phina.asset.AssetLoader();\r\n      loader.load({\r\n        json: enemies,\r\n        sound: { \"bgm\": \"./asset/sound/\" + stageData.bgm + \".mp3\" },\r\n        image: { \"bg\": \"./asset/image/\" + stageData.bg + \".png\" },\r\n      });\r\n      loader.on(\"load\", function() {\r\n        this.step2(stageData);\r\n      }.bind(this));\r\n\r\n      this.label.text = \"step1\";\r\n    },\r\n\r\n    step2: function(stageData) {\r\n      var textures = {};\r\n      stageData.enemies\r\n        .map(function(enemy) {\r\n          return phina.asset.AssetManager.get(\"json\", enemy + \".enemy\").data;\r\n        })\r\n        .map(function(enemyData) {\r\n          // console.log(enemyData);\r\n          return enemyData.texture;\r\n        })\r\n        .uniq()\r\n        .forEach(function(texture) {\r\n          textures[texture] = \"./asset/image/\" + texture + \".png\";\r\n        });\r\n\r\n      var loader = phina.asset.AssetLoader();\r\n      loader.load({\r\n        image: textures,\r\n      });\r\n      loader.on(\"load\", function() {\r\n        this.step3(stageData);\r\n      }.bind(this));\r\n\r\n      this.label.text = \"step2\";\r\n    },\r\n\r\n    step3: function(stageData) {\r\n      var xmls = {};\r\n      stageData.enemies\r\n        .map(function(enemy) {\r\n          return phina.asset.AssetManager.get(\"json\", enemy + \".enemy\").data;\r\n        })\r\n        .forEach(function(enemyData) {\r\n          if (enemyData.moveRunner) {\r\n            xmls[enemyData.moveRunner] = \"./asset/bulletml/\" + enemyData.moveRunner + \".xml\";\r\n          }\r\n          if (enemyData.bulletRunner) {\r\n            xmls[enemyData.bulletRunner] = \"./asset/bulletml/\" + enemyData.bulletRunner + \".xml\";\r\n          }\r\n        });\r\n      stageData.timeline.forEach(function(task) {\r\n        if (task.arguments.moveRunner) {\r\n          xmls[task.arguments.moveRunner] = \"./asset/bulletml/\" + task.arguments.moveRunner + \".xml\";\r\n        }\r\n        if (task.arguments.bulletRunner) {\r\n          xmls[task.arguments.bulletRunner] = \"./asset/bulletml/\" + task.arguments.bulletRunner + \".xml\";\r\n        }\r\n        if (task.arguments.enemy) {\r\n          if (task.arguments.enemy.moveRunner) {\r\n            xmls[task.arguments.enemy.moveRunner] = \"./asset/bulletml/\" + task.arguments.enemy.moveRunner + \".xml\";\r\n          }\r\n          if (task.arguments.enemy.bulletRunner) {\r\n            xmls[task.arguments.enemy.bulletRunner] = \"./asset/bulletml/\" + task.arguments.enemy.bulletRunner + \".xml\";\r\n          }\r\n        }\r\n      });\r\n      \r\n      var loader = phina.asset.AssetLoader();\r\n      loader.load({\r\n        xml: xmls,\r\n      });\r\n      loader.on(\"load\", function() {\r\n        this.label.tweener.clear().fadeOut(100);\r\n        this.bg1.tweener.fadeOut(500).call(function() {\r\n          this.app.popScene();\r\n        }.bind(this));\r\n      }.bind(this));\r\n\r\n      this.label.text = \"step3\";\r\n    },\r\n\r\n  });\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"passion.Utils\", {\r\n    _static: {\r\n      sep: function(num) {\r\n        return (\"\" + Math.floor(num)).replace(/(\\d)(?=(\\d{3})+$)/g , '$1,');\r\n      },\r\n    },\r\n    init: function() {},\r\n  });\r\n\r\n});\r\n"],"sourceRoot":"/source/"}