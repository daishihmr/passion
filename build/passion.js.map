{"version":3,"sources":["main.js","Application.js","Assets.js","Camera.js","Danmaku.js","GameManager.js","Pool.js","Utils.js","Background.js","Bullet.js","BulletDrawer.js","BulletEraseEffect.js","CircleButton.js","Enemy.js","ExplosionLarge.js","ExplosionSmall.js","GLLayer.js","LaserMazzleFlash.js","ParticleSystem.js","Player.js","Sprite.js","SpriteDrawer.js","UIBossHpGauge.js","UIFrame.js","UIHeadLabel.js","UILayer.js","BulletRunning.js","GameSceneBg.js","GamepadEx.js","KeyboardEx.js","PointerLock.js","GameScene.js","StageAssetLoadScene.js","AbsShot.js","Laser.js","NormalShot.js","NormalShot2.js","WideShot.js","WideShot2.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC/DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC5HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvlDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnlxJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClxjQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC5GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC3EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC/NA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChnGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvfile":"passion.js","sourcesContent":["const SCREEN_WIDTH = 360;\nconst SCREEN_HEIGHT = 640;\nconst GAME_AREA_WIDTH = SCREEN_WIDTH;\nconst GAME_AREA_HEIGHT = SCREEN_HEIGHT * 0.85;\nconst FPS = 60;\nconst PROD_DOMAIN = \"private.dev7.jp\";\n\nphina.main(() => {\n\n  phina.display.DisplayScene.defaults.$extend({\n    width: SCREEN_WIDTH,\n    height: SCREEN_HEIGHT,\n    backgroundColor: \"transparent\",\n  });\n\n  phina.display.Label.defaults.fontFamily = \"main\";\n  phina.display.Label.defaults.fill = \"white\";\n\n  phina.asset.SoundManager.volume = 0.05;\n  phina.asset.SoundManager.musicVolume = 0.05;\n\n  const app = passion.Application();\n  if (location.hostname == \"localhost\" || location.hostname == PROD_DOMAIN) {\n    app.enableStats();\n  }\n  app.run();\n\n  app.replaceScene(phina.game.ManagerScene({\n    scenes: [\n\n      {\n        className: \"phina.game.LoadingScene\",\n        arguments: {\n          assets: passion.Assets.get({ assetType: \"common\" }),\n        },\n      },\n\n      {\n        className: \"passion.StageAssetLoadScene\",\n        arguments: { stage: \"testStage\" },\n      },\n\n      {\n        className: \"passion.GameScene\",\n      },\n\n    ]\n  }));\n});","phina.namespace(() => {\n\n  phina.define(\"passion.Application\", {\n    superClass: \"phina.display.CanvasApp\",\n\n    init: function() {\n      this.superInit({\n        width: SCREEN_WIDTH,\n        height: SCREEN_HEIGHT,\n        backgroundColor: \"#114\",\n      });\n\n      this.fps = FPS;\n\n      this.keyboardEx = passion.Keyboard(document);\n      this.keyboardEx.on('keydown', e => {\n        this.currentScene && this.currentScene.flare('keydown', {\n          keyCode: e.keyCode,\n        });\n      });\n      this.keyboardEx.on('keyup', e => {\n        this.currentScene && this.currentScene.flare('keyup', {\n          keyCode: e.keyCode,\n        });\n      });\n      this.keyboardEx.on('keypress', e => {\n        this.currentScene && this.currentScene.flare('keypress', {\n          keyCode: e.keyCode,\n        });\n      });\n\n      this.gamepadManager = passion.GamepadManager();\n\n      // Pointer Lock APIが実装されたら使う\n      // if (!phina.isMobile()) {\n      //   this.pointerLock = passion.PointerLock(this.domElement);\n      //   window.document.addEventListener(\"click\", e => {\n      //     if (this.currentScene instanceof passion.GameScene) {\n      //       this.pointerLock.lock();\n      //     } else {\n      //       this.pointerLock.exit();\n      //     }\n\n      //     this.on(\"changedscene\", e => {\n      //       if (this.currentScene instanceof passion.GameScene) {\n      //         this.pointerLock.lock();\n      //       } else {\n      //         this.pointerLock.exit();\n      //       }\n      //     });\n      //   }, false);\n      // }\n    },\n\n    replaceScene: function(scene) {\n      this.superMethod(\"replaceScene\", scene);\n      this.flare('changedscene');\n    },\n\n    pushScene: function(scene) {\n      this.superMethod(\"pushScene\", scene);\n      this.flare('changedscene');\n    },\n\n    popScene: function(scene) {\n      this.superMethod(\"popScene\", scene);\n      this.flare('changedscene');\n    },\n\n    update: function() {\n      this.keyboardEx.update();\n      this.gamepadManager.update();\n    },\n\n  });\n});\n","phina.namespace(() => {\n\n  phina.define(\"passion.Assets\", {\n    _static: {\n      get: function(options) {\n        switch (options.assetType) {\n          case \"common\":\n            return {\n              font: {\n                main: \"./asset/font/Baumans/Baumans-Regular.ttf\",\n                message: \"./asset/font/YasashisaGothic.ttf\",\n              },\n              image: {\n                \"bullets.png\": \"./asset/image/bullets.png\",\n                \"bullets_erase.png\": \"./asset/image/bullets_erase.png\",\n                \"texture0.png\": \"./asset/image/texture0.png\",\n                \"effect.png\": \"./asset/image/effect.png\",\n              },\n              vertexShader: {\n                \"bullets.vs\": \"./asset/shader/bullets.vs\",\n                \"sprites.vs\": \"./asset/shader/sprites.vs\",\n              },\n              fragmentShader: {\n                \"bullets.fs\": \"./asset/shader/bullets.fs\",\n                \"sprites.fs\": \"./asset/shader/sprites.fs\",\n              },\n              sound: {\n                \"home\": \"./asset/sound/nc136160.mp3\",\n                \"shot\": \"./asset/sound/sen_ge_kijuu01.mp3\",\n              },\n            };\n          default:\n            throw \"invalid assetType: \" + options.assetType;\n        }\n      },\n    },\n  });\n\n});\n","phina.namespace(() => {\r\n\r\n  phina.define(\"passion.Camera\", {\r\n\r\n    position: null,\r\n    vMatrix: null,\r\n    pMatrix: null,\r\n    vpMatrix: null,\r\n\r\n    init: function() {\r\n      this.position = vec3.create();\r\n      this.vMatrix = mat4.create();\r\n      this.pMatrix = mat4.create();\r\n      this.vpMatrix = mat4.create();\r\n    },\r\n\r\n    setPosition: function(x, y, z) {\r\n      vec3.set(this.position, x, y, z);\r\n      return this;\r\n    },\r\n\r\n    lookAt: function(x, y, z) {\r\n      mat4.lookAt(this.vMatrix, this.position, [x, y, z], [0, 1, 0]);\r\n      return this;\r\n    },\r\n\r\n    ortho: function(left, right, bottom, top, near, far) {\r\n      mat4.ortho(this.pMatrix, left, right, bottom, top, near, far);\r\n      return this;\r\n    },\r\n\r\n    perspective: function(fovy, aspect, near, far) {\r\n      mat4.perspective(this.pMatrix, fovy, aspect, near, far);\r\n      return this;\r\n    },\r\n\r\n    calcVpMatrix: function() {\r\n      mat4.mul(this.vpMatrix, this.pMatrix, this.vMatrix);\r\n      return this;\r\n    },\r\n\r\n    uniformValues: function() {\r\n      return {\r\n        vpMatrix: this.vpMatrix,\r\n        cameraPosition: this.position,\r\n      };\r\n    }\r\n\r\n  });\r\n});\r\n","phina.namespace(() => {\n\n  phina.define(\"passion.Danmaku\", {\n    _static: {\n\n      config: null,\n\n      setup: function(gameScene) {\n        const player = gameScene.player;\n        const bullets = gameScene.bullets;\n        const enemies = gameScene.enemies;\n        const glLayer = gameScene.glLayer;\n        const bulletDrawer = glLayer.bulletDrawer;\n        const enemyDrawer = glLayer.enemyDrawer;\n        bulletml.Walker.random = () => gameScene.random.random();\n\n        this.config = {\n          target: player,\n          createNewBullet: (runner, spec) => {\n            const bullet = bulletDrawer.get();\n            if (bullet) {\n              bullet.spawn({\n                type: spec.type,\n                scale: 32,\n              });\n              bullet.bulletRunning.setRunner(runner);\n              gameScene.flare(\"spawnBullet\", { bullet: bullet });\n            }\n          },\n        };\n\n        return this.config;\n      },\n\n      createRunner: function(name) {\n        const bulletmlDoc = phina.asset.AssetManager.get(\"xml\", name);\n        const pattern = bulletml.buildXML(bulletmlDoc.data);\n        const config = passion.Danmaku.config;\n        return pattern.createRunner(config);\n      },\n    },\n\n    init: function() {},\n  });\n  \n  phina.asset.AssetLoader.assetLoadFunctions[\"bulletml\"] = phina.asset.AssetLoader.assetLoadFunctions[\"xml\"];\n\n});\n","phina.namespace(() => {\n\n  phina.define(\"passion.GameManager\", {\n    superClass: \"phina.util.EventDispatcher\",\n\n    score: 0,\n    highScore: 0,\n\n    frame: 0,\n    waitTo: 0,\n\n    timeline: null,\n\n    init: function(stageData, random) {\n      this.superInit();\n      this.timeline = stageData.timeline;\n      this.waitTo = -1;\n    },\n\n    update: function(app) {\n      while ((this.waitTo === this.frame || this.waitTo === -1) && this.timeline.length > 0) {\n        this.waitTo = -1;\n        const task = this.timeline.shift();\n\n        // console.log(\"[task] \" + this.frame + \" \" + task.type);\n\n        this[task.type](task.arguments);\n      }\n\n      this.frame += 1;\n    },\n\n    startBgm: function(arg) {\n      // const music = phina.asset.SoundManager.playMusic(\"bgm\" + arg.bgm, 0, true);\n      // if (arg.loopEnd) {\n      //   music.loopStart = arg.loopStart;\n      //   music.loopEnd = arg.loopEnd;\n      // }\n    },\n\n    stopBgm: function() {},\n\n    wait: function(arg) {\n      this.waitTo = this.frame + arg.time;\n    },\n\n    enemy: function(arg) {\n      this.flare(\"spawnEnemy\", arg);\n    },\n\n    enemyGroup: function(arg) {\n      let enemy;\n      if (typeof(arg.enemy) == \"string\") {\n        enemy = { name: enemy };\n      } else {\n        enemy = arg.enemy;\n      }\n      for (let i = 0; i < arg.count; i++) {\n        this.flare(\"spawnEnemy\", {}.$extend(enemy, {\n          x: (arg.x || 0) + (arg.dx || 0) * i,\n          y: (arg.y || 0) + (arg.dy || 0) * i,\n          wait: (arg.wait || 0) + (arg.dwait || 0) * i,\n        }));\n      }\n    },\n\n    warning: function(arg) {},\n\n    boss: function(arg) {},\n\n  });\n});\n","phina.namespace(() => {\r\n\r\n  phina.define(\"passion.Pool\", {\r\n\r\n    array: null,\r\n    dirty: null,\r\n    comparator: null,\r\n\r\n    init: function(array, comparator) {\r\n      this.array = array || [];\r\n      this.comparator = comparator || function(lhs, rhs) {\r\n        return lhs - rhs;\r\n      };\r\n      this.dirty = true;\r\n    },\r\n\r\n    add: function(obj) {\r\n      this.array.push(obj);\r\n      this.dirty = true;\r\n    },\r\n\r\n    get: function() {\r\n      if (this.dirty) {\r\n        this.array.sort(this.comparator);\r\n        this.dirty = false;\r\n      }\r\n      return this.array.shift();\r\n    },\r\n  });\r\n\r\n  Array.prototype.$method(\"toPool\", function(comparator) {\r\n    return passion.Pool(this, comparator);\r\n  });\r\n\r\n});\r\n","phina.namespace(() => {\n\n  phina.define(\"passion.Utils\", {\n    _static: {\n      sep: function(num) {\n        return (\"\" + Math.floor(num)).replace(/(\\d)(?=(\\d{3})+$)/g , '$1,');\n      },\n    },\n    init: function() {},\n  });\n  \n  phina.accessory.Tweener.$method(\"clone\", function() {\n    return phina.accessory.Tweener(this.target);\n  });\n\n});\n","phina.namespace(() => {\n\n  phina.define(\"passion.Background\", {\n    superClass: \"passion.Sprite\",\n\n    _static: {\n      setup: function(glLayer, texture) {\n        const texSrc = phina.asset.AssetManager.get(\"image\", texture);\n        const height = texSrc.domElement.height * GAME_AREA_WIDTH / texSrc.domElement.width;\n        const tex = phina.graphics.Canvas().setSize(512, 512);\n        tex.context.drawImage(texSrc.domElement, 0, 0, 512, 512);\n        phina.asset.AssetManager.set(\"image\", texture + \"_bg\", tex);\n\n        glLayer.bgDrawer.addObjType(\"bg\", {\n          className: \"passion.Background\",\n          texture: texture + \"_bg\",\n          count: 2,\n        });\n\n        const bg1 = glLayer.bgDrawer.get(\"bg\");\n        bg1.spawn(height);\n        bg1.x = GAME_AREA_WIDTH / 2;\n        bg1.y = GAME_AREA_HEIGHT / 2;\n        bg1.addChildTo(glLayer);\n\n        const bg2 = glLayer.bgDrawer.get(\"bg\");\n        bg2.spawn(height);\n        bg2.x = GAME_AREA_WIDTH / 2;\n        bg2.y = GAME_AREA_HEIGHT / 2 - height;\n        bg2.addChildTo(glLayer);\n      },\n    },\n\n    height: 0,\n\n    init: function(id, instanceData, instanceStride) {\n      this.superInit(id, instanceData, instanceStride);\n      this.on(\"enterframe\", e => {\n        this.y += 3;\n        if (this.y > GAME_AREA_HEIGHT / 2 + this.height) {\n          this.y -= this.height * 2;\n        }\n      });\n    },\n\n    spawn: function(height) {\n      this.height = height;\n      this.superMethod(\"spawn\", {\n        scaleX: GAME_AREA_WIDTH,\n        scaleY: this.height,\n        frameX: 0,\n        frameY: 0,\n        frameW: 1,\n        frameH: 1,\n        red: 0.5,\n        green: 0.5,\n        blue: 0.5,\n      });\n      return this;\n    },\n\n  });\n});\n","phina.namespace(() => {\n\n  phina.define(\"passion.Bullet\", {\n    superClass: \"phina.app.Element\",\n\n    id: -1,\n    instanceData: null,\n\n    x: 0,\n    y: 0,\n    age: 0,\n\n    power: 0,\n\n    _active: false,\n\n    radius: 20,\n    \n    _bulletRunning: null,\n\n    init: function(id, instanceData, instanceStride) {\n      this.superInit();\n      this.id = id;\n      this.instanceData = instanceData;\n\n      this.index = id * instanceStride;\n    },\n\n    spawn: function(option) {\n      const instanceData = this.instanceData;\n      const index = this.index;\n\n      this.age = 0;\n      this.scale = option.scale;\n      this.frameX = option.type % 8;\n      this.frameY = ~~(option.type / 8);\n      this.visible = true;\n      this.brightness = 1;\n      this.auraRed = 0.2 + ~~(option.type / 8) % 2;\n      this.auraGreen = 0.2 + 0;\n      this.auraBlue = 0.2 + ~~(option.type / 8) % 2 + 1;\n\n      return this;\n    },\n\n    activate: function() {\n      this._active = true;\n      this.flare(\"activated\");\n      return this;\n    },\n\n    inactivate: function() {\n      this._active = false;\n      this.flare(\"inactivated\");\n      return this;\n    },\n\n    onremoved: function() {\n      this.visible = false;\n      this.bulletRunning.setRunner(null);\n    },\n\n    update: function(app) {\n      const instanceData = this.instanceData;\n      const index = this.index;\n\n      this.brightness = 1.5 + Math.sin(this.age * 0.2) * 0.6;\n\n      if (this.x < -50 || GAME_AREA_WIDTH + 50 < this.x || this.y < -50 || GAME_AREA_HEIGHT + 50 < this.y) {\n        this.remove();\n        return;\n      }\n\n      this.age += 1;\n    },\n\n    isHit: function(target) {\n      if (!this.visible || !target.visible) return false;\n      return (this.x - target.x) * (this.x - target.x) + (this.y - target.y) * (this.y - target.y) < 5 * 5;\n    },\n\n    _accessor: {\n      x: {\n        get: function() {\n          return this.instanceData[this.index + 0];\n        },\n        set: function(v) {\n          this.instanceData[this.index + 0] = v;\n        },\n      },\n      y: {\n        get: function() {\n          return this.instanceData[this.index + 1];\n        },\n        set: function(v) {\n          this.instanceData[this.index + 1] = v;\n        },\n      },\n      rotation: {\n        get: function() {\n          return this.instanceData[this.index + 2];\n        },\n        set: function(v) {\n          this.instanceData[this.index + 2] = v;\n        },\n      },\n      scale: {\n        get: function() {\n          return this.instanceData[this.index + 3];\n        },\n        set: function(v) {\n          this.instanceData[this.index + 3] = v;\n        },\n      },\n      frameX: {\n        get: function() {\n          return this.instanceData[this.index + 4];\n        },\n        set: function(v) {\n          this.instanceData[this.index + 4] = v;\n        },\n      },\n      frameY: {\n        get: function() {\n          return this.instanceData[this.index + 5];\n        },\n        set: function(v) {\n          this.instanceData[this.index + 5] = v;\n        },\n      },\n      visible: {\n        get: function() {\n          return this.instanceData[this.index + 6] == 1;\n        },\n        set: function(v) {\n          this.instanceData[this.index + 6] = v ? 1 : 0;\n        },\n      },\n      brightness: {\n        get: function() {\n          return this.instanceData[this.index + 7];\n        },\n        set: function(v) {\n          this.instanceData[this.index + 7] = v;\n        },\n      },\n      auraRed: {\n        get: function() {\n          return this.instanceData[this.index + 8];\n        },\n        set: function(v) {\n          this.instanceData[this.index + 8] = v;\n        },\n      },\n      auraGreen: {\n        get: function() {\n          return this.instanceData[this.index + 9];\n        },\n        set: function(v) {\n          this.instanceData[this.index + 9] = v;\n        },\n      },\n      auraBlue: {\n        get: function() {\n          return this.instanceData[this.index + 10];\n        },\n        set: function(v) {\n          this.instanceData[this.index + 10] = v;\n        },\n      },\n    },\n  });\n\n  passion.Bullet.prototype.getter(\"bulletRunning\", function() {\n    if (!this._bulletRunning) {\n      this._bulletRunning = passion.BulletRunning().attachTo(this);\n    }\n    return this._bulletRunning;\n  });\n\n});\n","phina.namespace(() => {\n  phina.define(\"passion.BulletDrawer\", {\n    superClass: \"phigl.InstancedDrawable\",\n\n    instanceData: null,\n\n    pool: null,\n    _count: 3000,\n\n    init: function(gl, ext, w, h) {\n      this.superInit(gl, ext);\n\n      const shader = phigl.Program(gl)\n        .attach(\"bullets.vs\")\n        .attach(\"bullets.fs\")\n        .link();\n\n      this\n        .setProgram(shader)\n        .setDrawMode(gl.TRIANGLE_STRIP)\n        .setIndexValues([0, 1, 2, 3])\n        .setAttributes(\"position\", \"uv\")\n        .setAttributeDataArray([{\n          unitSize: 2,\n          data: [\n            //\n            -0.5, +0.5,\n            //\n            +0.5, +0.5,\n            //\n            -0.5, -0.5,\n            //\n            +0.5, -0.5,\n          ]\n        }, {\n          unitSize: 2,\n          data: [\n            //\n            0, 32 / 256,\n            //\n            32 / 256, 32 / 256,\n            //\n            0, 0,\n            //\n            32 / 256, 0,\n          ]\n        }, ])\n        .setInstanceAttributes(\n          \"instancePosition\",\n          \"instanceRotation\",\n          \"instanceScale\",\n          \"instanceFrame\",\n          \"instanceVisible\",\n          \"instanceBrightness\",\n          \"instanceAuraColor\"\n        )\n        .setUniforms(\n          \"vpMatrix\",\n          \"texture\",\n          \"globalScale\"\n        );\n\n      const instanceUnit = this.instanceStride / 4;\n\n      const texture = phigl.Texture(gl, \"bullets.png\");\n\n      this.uniforms.texture.setValue(0).setTexture(texture);\n      this.uniforms.globalScale.setValue(1.0);\n\n      const instanceData = this.instanceData = [];\n      for (let i = 0; i < this._count; i++) {\n        instanceData.push(\n          // position\n          0, 0,\n          // rotation\n          0,\n          // scale\n          1,\n          // frame\n          0, 0,\n          // visible\n          0,\n          // brightness\n          0,\n          // auraColor\n          0, 0, 0\n        );\n      }\n      this.setInstanceAttributeData(instanceData);\n\n      this.pool = Array.range(0, this._count)\n        .map(id => {\n          const b = passion.Bullet(id, instanceData, instanceUnit);\n          b.on(\"removed\", () => this.pool.add(b));\n          return b;\n        })\n        .toPool((lhs, rhs) => lhs.id - rhs.id);\n    },\n\n    get: function() {\n      return this.pool.get();\n    },\n\n    update: function(app) {\n      this.setInstanceAttributeData(this.instanceData);\n    },\n\n    render: function(uniforms) {\n      const gl = this.gl;\n      // gl.enable(gl.BLEND);\n      gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n      // gl.disable(gl.DEPTH_TEST);\n\n      this.uniforms.globalScale.value = 1.0;\n      if (uniforms) {\n        uniforms.forIn((key, value) => {\n          if (this.uniforms[key]) this.uniforms[key].value = value;\n        });\n      }\n\n      this.draw(this._count);\n    },\n  });\n\n});","phina.namespace(() => {\n\n  phina.define(\"passion.BulletEraseEffect\", {\n    superClass: \"passion.Sprite\",\n\n    init: function(id, instanceData, instanceStride) {\n      this.superInit(id, instanceData, instanceStride);\n      this.on(\"enterframe\", e => {\n        if (e.app.ticker.frame % 2 === 0) {\n          this.frameX += 1 / 8;\n          if (this.frameX >= 1.0) {\n            this.remove();\n          }\n        }\n      });\n    },\n\n    spawn: function(options) {\n      this.superMethod(\"spawn\", {}.$extend(options, {\n        frameX: 0,\n        frameY: 1 / 8,\n        frameW: 1 / 8,\n        frameH: 1 / 8,\n        scaleX: 64,\n        scaleY: 64,\n        alpha: 1.0,\n      }));\n      return this;\n    },\n\n  });\n});\n"," phina.namespace(() => {\n\n   phina.define(\"passion.CircleButton\", {\n     superClass: \"phina.display.Shape\",\n\n     init: function(options) {\n       this.superInit({}.$extend(options, {\n         width: options.radius * 2,\n         height: options.radius * 2,\n       }));\n\n       this.interactive = true;\n       this.boundingType = \"circle\";\n       this.radius = options.radius;\n       this.backgroundColor = \"transparent\";\n       this.fill = \"hsla(190, 100%, 60%, 0.4)\";\n       this.stroke = \"hsla(190, 100%, 60%, 0.9)\";\n       this.strokeWidth = 2;\n       this.fromJSON({\n         children: {\n           text: {\n             className: \"phina.display.Label\",\n             arguments: {\n               text: options.text,\n               fontSize: options.fontSize || 24,\n               // fontWeight: \"bold\",\n               fontFamily: \"main\",\n             },\n             fill: \"hsla(190, 100%, 95%, 0.8)\",\n             strokeWidth: 0,\n           },\n         },\n       });\n     },\n\n     postrender: function(canvas) {\n       const c = canvas.context;\n\n       c.strokeStyle = \"hsla(190, 100%, 60%, 0.8)\";\n\n       c.beginPath();\n       c.arc(0, 0, this.radius * 0.65, 0, Math.PI * 2, false);\n       c.lineWidth = 1;\n       c.fill();\n       c.stroke();\n\n       c.beginPath();\n       c.arc(0, 0, this.radius * 0.75, 0, Math.PI * 2, false);\n       c.lineWidth = 3;\n       c.stroke();\n\n       c.strokeStyle = \"hsla(190, 100%, 60%, 0.8)\";\n       for (let a = 0, b; a < Math.PI * 2;) {\n         b = Math.randfloat(1.0, 2.0);\n         c.beginPath();\n         c.arc(0, 0, this.radius * 0.90, a, a + b, false);\n         c.lineWidth = 1;\n         c.stroke();\n         a += b * 1.5;\n       }\n\n       c.strokeStyle = \"hsla(190, 100%, 60%, 0.8)\";\n       for (let a = 0, b; a < Math.PI * 2;) {\n         b = Math.randfloat(1.0, 2.0);\n         c.beginPath();\n         c.arc(0, 0, this.radius * 1.00, a, a + b, false);\n         c.lineWidth = 1;\n         c.stroke();\n         a += b * 1.5;\n       }\n     },\n\n     onpointstart: function(e) {\n       this.scaleX = 1.2;\n       this.scaleY = 1.2;\n     },\n\n     onpointend: function(e) {\n       this.scaleX = 1.0;\n       this.scaleY = 1.0;\n       if (this.hitTest(e.pointer.x, e.pointer.y)) {\n         this.flare(\"clicked\");\n       }\n     },\n\n   });\n });\n","phina.namespace(() => {\n\n  phina.define(\"passion.Enemy\", {\n    superClass: \"passion.Sprite\",\n\n    motionRunner: null,\n    attackRunner: null,\n\n    /**\n     * -1: pooling\n     * 0: wait (muteki)\n     * 1: not entered (muteki)\n     * 2: entered\n     * 3: killed or removing (muteki)\n     * @type {Number}\n     */\n    status: -1,\n\n    hp: 0,\n    hitRadius: 0,\n    expType: null,\n\n    waitTime: 0,\n\n    bx: 0,\n    by: 0,\n\n    init: function(id, instanceData, instanceStride) {\n      this.superInit(id, instanceData, instanceStride);\n\n      this.on(\"spawned\", e => this.status = 0);\n      this.on(\"activated\", e => this.status = 1)\n      this.on(\"entered\", e => this.status = 2);\n      this.on(\"killed\", e => this.status = 3);\n\n      this.on(\"removed\", e => {\n        this.clear(\"damaged\");\n        this.tweener.clear();\n        this.motionRunner = null;\n        this.attackRunner = null;\n        this.status = -1;\n        this.waitTime = 0;\n      });\n      this.on(\"enterframe\", e => {\n        if (this.status === 0) {\n          this.waitTime -= 1;\n          if (this.waitTime <= 0) {\n            this.flare(\"activated\");\n          }\n        } else if (this.status === 1) {\n          if (this.hitRadius < this.x && this.x < GAME_AREA_WIDTH - this.hitRadius && this.hitRadius < this.y && this.y < GAME_AREA_HEIGHT - this.hitRadius) {\n            this.flare(\"entered\");\n          }\n        } else if (this.status === 2 || this.status === 3) {\n          if (this.x < -this.hitRadius || GAME_AREA_WIDTH + this.hitRadius < this.x || this.y < -this.hitRadius || GAME_AREA_HEIGHT + this.hitRadius < this.y) {\n            this.remove();\n            return;\n          }\n        }\n\n        if (0 < this.status && this.status < 3) {\n          if (this.motionRunner) {\n            this.bx = this.x;\n            this.by = this.y;\n            this.motionRunner.update();\n            this.x = this.motionRunner.x;\n            this.y = this.motionRunner.y;\n            if (this.rot) {\n              this.rotation = this.motionRunner.direction - Math.PI * 0.5;\n            }\n          }\n        }\n\n        if (this.status === 2) {\n          if (!this.rot || this.y < passion.Danmaku.config.target.y) {\n            if (this.attackRunner) {\n              this.attackRunner.x = this.x;\n              this.attackRunner.y = this.y;\n              this.attackRunner.update();\n            }\n          }\n        }\n      });\n    },\n\n    spawn: function(options) {\n      this.superMethod(\"spawn\", options);\n      this.hp = options.hp || 0;\n      this.hitRadius = options.hitRadius || 24;\n      this.expType = options.expType || \"small\";\n\n      if (options.motion) {\n        this.motionRunner = passion.Danmaku.createRunner(\"motion/\" + options.motion);\n        this.motionRunner.x = this.x;\n        this.motionRunner.y = this.y;\n      }\n      if (options.attack) {\n        this.attackRunner = passion.Danmaku.createRunner(\"attack/\" + options.attack);\n        this.attackRunner.x = this.x;\n        this.attackRunner.y = this.y;\n      }\n\n      this.hp = options.hp;\n      this.waitTime = options.wait || 0;\n      this.rot = options.rot || false;\n\n      if (!options.muteki) {\n        this.on(\"damaged\", e => {\n          const shot = e.shot;\n          this.hp -= shot.power;\n          if (this.hp <= 0) {\n            this.flare(\"killed\");\n          }\n        });\n      }\n\n      this.flare(\"spawned\");\n\n      return this;\n    },\n\n    playKilledEffect: function(gameScene) {\n      switch (this.expType) {\n        case \"small\":\n        default:\n          this.remove();\n          gameScene.flare(\"spawnParticle\", {\n            className: \"passion.ExplosionSmall\",\n            x: this.x,\n            y: this.y,\n          });\n          break;\n      }\n    },\n\n    isHit: function(target) {\n      if (!target.visible || this.status != 2 || this.hp <= 0) return false;\n      return (this.x - target.x) * (this.x - target.x) + (this.y - target.y) * (this.y - target.y) < this.hitRadius * this.hitRadius;\n    },\n\n  });\n});\n","phina.namespace(() => {\n\n  phina.define(\"passion.ExplosionLarge\", {\n    superClass: \"passion.ParticleEmitter\",\n\n    init: function(glLayer, drawer) {\n      this.superInit(glLayer, drawer, \"particle\", {\n        frameX: 7 / 8,\n        frameY: 0 / 8,\n        frameW: 1 / 8,\n        frameH: 1 / 8,\n        red: 1.0,\n        green: 0.8,\n        blue: 0.2,\n        alpha: 0.8,\n        scaleX: 10,\n        scaleY: 10,\n      });\n      \n      this.tweener\n        .clear()\n        .set({\n          genPerFrame: 5,\n        })\n        .to({\n          genPerFrame: 0,\n        }, 100)\n        .call(() => this.remove());\n    },\n    \n    onspawnParticle: function(e) {\n      const p = e.particle;\n      const dir = Math.random() * Math.PI * 2;\n      const dst = Math.randint(2, 25);\n      p.tweener\n        .clear()\n        .to({\n          x: p.x + Math.cos(dir) * dst,\n          y: p.y + Math.sin(dir) * dst,\n          scaleX: 50,\n          scaleY: 50,\n          green: 0.0,\n          blue: 0.0,\n          alpha: 0\n        }, 400)\n        .call(() => p.remove());\n    },\n\n  });\n});\n","phina.namespace(() => {\n\n  phina.define(\"passion.ExplosionSmall\", {\n    superClass: \"passion.ParticleEmitter\",\n\n    init: function(glLayer, drawer) {\n      this.superInit(glLayer, drawer, \"particle\", {\n        frameX: 7 / 8,\n        frameY: 0 / 8,\n        frameW: 1 / 8,\n        frameH: 1 / 8,\n        red: 1.0,\n        green: 0.8,\n        blue: 0.2,\n        alpha: 0.8,\n        scaleX: 10,\n        scaleY: 10,\n      });\n      \n      this.tweener\n        .clear()\n        .set({\n          genPerFrame: 5,\n        })\n        .to({\n          genPerFrame: 0,\n        }, 150)\n        .call(() => this.remove());\n    },\n    \n    onspawnParticle: function(e) {\n      const p = e.particle;\n      const dir = Math.random() * Math.PI * 2;\n      const dst = Math.randint(2, 25);\n      p.tweener\n        .clear()\n        .to({\n          x: p.x + Math.cos(dir) * dst,\n          y: p.y + Math.sin(dir) * dst,\n          scaleX: 50,\n          scaleY: 50,\n          green: 0.0,\n          blue: 0.0,\n          alpha: 0\n        }, 400, \"easeOutQuad\")\n        .call(() => p.remove());\n    },\n\n  });\n});\n","phina.namespace(() => {\n\n  phina.define(\"passion.GLLayer\", {\n    superClass: \"phina.display.Layer\",\n\n    renderChildBySelf: true,\n    ready: false,\n\n    domElement: null,\n    gl: null,\n\n    camera: null,\n\n    bgDrawer: null,\n    enemyDrawer: null,\n    shotDrawer: null,\n    effectDrawer: null,\n    playerDrawer: null,\n    bulletDrawer: null,\n    topEffectDrawer: null,\n\n    init: function() {\n      this.superInit({\n        width: GAME_AREA_WIDTH,\n        height: GAME_AREA_HEIGHT,\n      });\n      this.originX = 0;\n      this.originY = 0;\n\n      if (passion.GLLayer.GL_CANVAS == null) {\n        passion.GLLayer.GL_CANVAS = document.createElement(\"canvas\");\n        passion.GLLayer.GL = passion.GLLayer.GL_CANVAS.getContext(\"webgl\");\n      }\n\n      this.domElement = passion.GLLayer.GL_CANVAS;\n      this.domElement.width = this.width * passion.GLLayer.quality;\n      this.domElement.height = this.height * passion.GLLayer.quality;\n\n      const gl = this.gl = passion.GLLayer.GL;\n      const extInstancedArrays = phigl.Extensions.getInstancedArrays(gl);\n\n      gl.viewport(0, 0, this.domElement.width, this.domElement.height);\n      gl.clearColor(0.0, 0.0, 0.0, 1.0);\n      gl.clearDepth(1.0);\n      gl.disable(gl.CULL_FACE);\n      gl.enable(gl.BLEND);\n      gl.disable(gl.DEPTH_TEST);\n\n      const cw = this.domElement.width;\n      const ch = this.domElement.height;\n      const w = this.width;\n      const h = this.height;\n      const sw = Math.pow(2, ~~Math.log2(cw) + 1);\n      const sh = Math.pow(2, ~~Math.log2(ch) + 1);\n\n      this.camera = passion.Camera()\n        .setPosition(w * 0.5, h * 0.5, 2000)\n        .lookAt(w * 0.5, h * 0.5, 0)\n        .ortho(-w * 0.5, w * 0.5, h * 0.5, -h * 0.5, 0.1, 3000)\n        .calcVpMatrix();\n\n      this.bgDrawer = passion.SpriteDrawer(gl, extInstancedArrays, w, h);\n      this.enemyDrawer = passion.SpriteDrawer(gl, extInstancedArrays, w, h);\n      this.shotDrawer = passion.SpriteDrawer(gl, extInstancedArrays, w, h);\n      this.effectDrawer = passion.SpriteDrawer(gl, extInstancedArrays, w, h);\n      this.playerDrawer = passion.SpriteDrawer(gl, extInstancedArrays, w, h);\n      this.bulletDrawer = passion.BulletDrawer(gl, extInstancedArrays, w, h);\n      this.topEffectDrawer = passion.SpriteDrawer(gl, extInstancedArrays, w, h);\n\n      this.ready = true;\n    },\n\n    update: function(app) {\n      if (!this.ready) return;\n\n      this.bgDrawer.update(app);\n      this.enemyDrawer.update(app);\n      this.shotDrawer.update(app);\n      this.effectDrawer.update(app);\n      this.playerDrawer.update(app);\n      this.bulletDrawer.update(app);\n      this.topEffectDrawer.update(app);\n    },\n\n    draw: function(canvas) {\n      if (!this.ready) return;\n\n      const gl = this.gl;\n      const image = this.domElement;\n      const cw = image.width;\n      const ch = image.height;\n\n      const ou = this.camera.uniformValues();\n\n      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n\n      this.bgDrawer.render(ou);\n      this.effectDrawer.render(ou);\n      this.enemyDrawer.render(ou);\n      this.shotDrawer.render(ou);\n      this.playerDrawer.render(ou);\n      this.bulletDrawer.render(ou);\n      this.topEffectDrawer.render(ou);\n\n      gl.flush();\n\n      const p = passion.GLLayer.padding;\n      canvas.context.drawImage(image,\n        0, 0, cw, ch,\n        this.width * p, this.height * p, this.width * (1 - p * 2), this.height * (1 - p * 2)\n      );\n    },\n\n    _static: {\n      GL_CANVAS: null,\n      GL: null,\n      // padding: 0.1,\n      // padding: 0.05,\n      padding: 0.02,\n      // quality: 0.5,\n      // quality: 0.75,\n      quality: 1.0,\n    },\n  });\n\n});\n","phina.namespace(() => {\n\n  let c = 0;\n\n  phina.define(\"passion.LaserMazzleFlash\", {\n    superClass: \"passion.Sprite\",\n\n    init: function(id, instanceData, instanceStride) {\n      this.superInit(id, instanceData, instanceStride);\n    },\n\n    spawn: function(options) {\n      this.superMethod(\"spawn\", options.$safe({\n        frameX: 5 / 8,\n        frameY: 1 / 8,\n        frameW: 1 / 8,\n        frameH: 1 / 8,\n        scaleX: 130 + Math.sin(c) * 30,\n        scaleY: 130 + Math.sin(c) * 30,\n        alpha: 0.1,\n        rotation: (-90).toRadian(),\n      }));\n      this.tweener\n        .clear()\n        .to({\n          alpha: 0\n        }, 300)\n        .call(() => this.remove());\n\n      c += 0.4;\n\n      return this;\n    },\n\n  });\n});\n","phina.namespace(() => {\n\n  phina.define(\"passion.ParticleEmitter\", {\n    superClass: \"phina.app.Element\",\n\n    x: 0,\n    y: 0,\n\n    drawer: null,\n    objName: null,\n    spawnOptions: null,\n\n    genPerFrame: 0,\n\n    init: function(glLayer, drawer, objName, spawnOptions) {\n      this.superInit();\n      this.glLayer = glLayer;\n      this.drawer = drawer;\n      this.objName = objName;\n      this.spawnOptions = spawnOptions;\n    },\n\n    update: function(app) {\n      for (let i = 0; i < this.genPerFrame; i++) {\n        const particle = this.drawer.get(this.objName);\n        if (particle) {\n          particle\n            .spawn({}.$extend(this.spawnOptions, {\n              x: this.x,\n              y: this.y,\n            }))\n            .addChildTo(this.glLayer);\n          this.flare(\"spawnParticle\", { particle: particle });\n        } else {\n          break;\n        }\n      }\n    },\n  });\n\n  phina.define(\"passion.Particle\", {\n    superClass: \"passion.Sprite\",\n\n    init: function(id, instanceData, instanceStride) {\n      this.superInit(id, instanceData, instanceStride);\n      this.on(\"removed\", e => this.tweener.clear());\n    },\n\n  });\n\n});\n","phina.namespace(() => {\n\n  phina.define(\"passion.Player\", {\n    superClass: \"passion.Sprite\",\n\n    _static: {\n      setup: function(glLayer, spec) {\n        glLayer.playerDrawer.addObjType(\"player\", {\n          className: \"passion.Player\",\n          texture: \"texture0.png\",\n        });\n\n        const player = glLayer.playerDrawer.get(\"player\");\n        player.spawn(spec);\n\n        player.on(\"enterframe\", e => {\n          if (e.app.ticker.frame % 2 !== 0) return;\n\n          const hex1 = glLayer.effectDrawer.get(\"particle\");\n          const hex2 = glLayer.effectDrawer.get(\"particle\");\n          const options = {\n            x: player.x - 8,\n            y: player.y + 15,\n            scaleX: 18,\n            scaleY: 18,\n            frameX: 7 / 8,\n            frameY: 0 / 8,\n            frameW: 1 / 8,\n            frameH: 1 / 8,\n            red: 1.0,\n            green: 1.0,\n            blue: 1.0,\n            alpha: 1.0,\n          };\n\n          if (hex1) {\n            options.x = player.x - 8;\n            hex1.spawn(options);\n            hex1.onenterframe = e => {\n              hex1.y += 2;\n              hex1.alpha *= 0.80;\n              if (hex1.alpha < 0.01) {\n                hex1.remove();\n              }\n            };\n            hex1.addChildTo(glLayer);\n          }\n\n          if (hex2) {\n            options.x = player.x + 8;\n            hex2.spawn(options);\n            hex2.onenterframe = e => {\n              hex2.y += 2;\n              hex2.alpha *= 0.80;\n              if (hex2.alpha < 0.01) {\n                hex2.remove();\n              }\n            };\n            hex2.addChildTo(glLayer);\n          }\n        });\n\n        const aura = glLayer.effectDrawer.get(\"particle\");\n        aura.spawn({\n          x: player.x,\n          y: player.y,\n          scaleX: 80,\n          scaleY: 80,\n          frameX: 0 / 8,\n          frameY: 1 / 8,\n          frameW: 1 / 8,\n          frameH: 1 / 8,\n          red: 2.0,\n          green: 2.0,\n          blue: 2.0,\n          alpha: 0.2,\n        });\n        aura.addChildTo(glLayer);\n        aura.on(\"enterframe\", e => {\n          aura.x = player.x;\n          aura.y = player.y;\n        });\n\n        const centerMarker = glLayer.topEffectDrawer.get(\"particle\");\n        centerMarker.spawn({\n          x: player.x,\n          y: player.y,\n          scaleX: 14,\n          scaleY: 14,\n          frameX: 7 / 8,\n          frameY: 0 / 8,\n          frameW: 1 / 8,\n          frameH: 1 / 8,\n          red: 0.4,\n          green: 2.0,\n          blue: 1.6,\n          alpha: 1.0,\n        });\n        centerMarker.addChildTo(player);\n        centerMarker.on(\"enterframe\", e => {\n          centerMarker.x = player.x;\n          centerMarker.y = player.y;\n          centerMarker.rotation += 0.1;\n        });\n\n        return player;\n      },\n    },\n\n    hp: 0,\n\n    _roll: 0,\n    heat: 0,\n    heatByShot: 0,\n\n    fireable: true,\n    controllable: true,\n    mutekiTime: 0,\n\n    init: function(id, instanceData, instanceStride) {\n      this.superInit(id, instanceData, instanceStride);\n      this.on(\"enterframe\", e => {\n        this.controll(e.app);\n        if (this.mutekiTime > 0) this.mutekiTime -= 1;\n      });\n    },\n\n    spawn: function(spec) {\n      this.superMethod(\"spawn\", {\n        x: GAME_AREA_WIDTH * 0.5,\n        y: GAME_AREA_HEIGHT * 0.9,\n        scaleX: 64,\n        scaleY: 64,\n        frameX: 3 / 8,\n        frameY: 0 / 8,\n        frameW: 1 / 8,\n        frameH: 1 / 8,\n        red: 1.2,\n        green: 1.2,\n        blue: 1.2,\n      });\n\n      this.hp = spec.hp;\n\n      return this;\n    },\n\n    controll: function(app) {\n      const p = app.pointer;\n      const dp = p.deltaPosition;\n\n      if (this.controllable) {\n\n        if (phina.isMobile() || p.getPointing()) {\n          this.x += dp.x * 2;\n          this.y += dp.y * 2;\n          if (dp.x < 0) {\n            this.roll -= 0.2;\n          } else if (0 < dp.x) {\n            this.roll += 0.2;\n          }\n\n          this.x = Math.clamp(this.x, 5, GAME_AREA_WIDTH - 5);\n          this.y = Math.clamp(this.y, 40, GAME_AREA_HEIGHT - 5);\n        }\n      }\n\n      if (!this.controllable || dp.x == 0) {\n        this.roll *= 0.9;\n        if (-0.01 < this.roll && this.roll < 0.01) {\n          this.roll = 0;\n        }\n      }\n\n      if (this.fireable) {\n        const touch = (!phina.isMobile() && p.getPointing()) || (phina.isMobile() && app.pointers.length > 0);\n        if (touch && this.heat <= 0) {\n          this.flare(\"fireShot\");\n          this.heat = this.heatByShot;\n        }\n      }\n\n      this.heat -= 1;\n    },\n\n    ondamaged: function(e) {\n      if (this.mutekiTime > 0) return;\n\n      const another = e.another;\n    },\n\n    _accessor: {\n      roll: {\n        get: function() {\n          return this._roll;\n        },\n        set: function(v) {\n          this._roll = Math.clamp(v, -3, 3);\n          const r = ~~this._roll;\n          this.frameX = (r + 3) / 8;\n        },\n      },\n    },\n\n  });\n});","phina.namespace(() => {\n\n  phina.define(\"passion.Sprite\", {\n    superClass: \"phina.app.Element\",\n\n    id: -1,\n    instanceData: null,\n\n    age: 0,\n\n    _bulletRunning: null,\n\n    init: function(id, instanceData, instanceStride) {\n      this.superInit();\n      this.id = id;\n      this.instanceData = instanceData;\n      this.index = id * instanceStride;\n    },\n\n    spawn: function(options) {\n      options.$safe({\n        visible: true,\n        x: 0,\n        y: 0,\n        rotation: 0,\n        scaleX: 1,\n        scaleY: 1,\n        frameX: 0,\n        frameY: 0,\n        frameW: 1 / 8,\n        frameH: 1 / 8,\n        red: 1.0,\n        green: 1.0,\n        blue: 1.0,\n        alpha: 1.0,\n      });\n\n      // const index = this.index;\n      // const instanceData = this.instanceData;\n\n      this.visible = options.visible;\n      this.x = options.x;\n      this.y = options.y;\n      this.rotation = options.rotation;\n      this.scaleX = options.scaleX;\n      this.scaleY = options.scaleY;\n      this.frameX = options.frameX;\n      this.frameY = options.frameY;\n      this.frameW = options.frameW;\n      this.frameH = options.frameH;\n      this.red = options.red;\n      this.green = options.green;\n      this.blue = options.blue;\n      this.alpha = options.alpha;\n\n      this.age = 0;\n\n      return this;\n    },\n\n    update: function(app) {\n      this.age += 1;\n    },\n\n    onremoved: function() {\n      this.visible = false;\n      this.bulletRunning.setRunner(null);\n      this.tweener.clear();\n    },\n\n    _accessor: {\n      visible: {\n        get: function() {\n          return this.instanceData[this.index + 0] === 1;\n        },\n        set: function(v) {\n          this.instanceData[this.index + 0] = v ? 1 : 0;\n        },\n      },\n      x: {\n        get: function() {\n          return this.instanceData[this.index + 1];\n        },\n        set: function(v) {\n          this.instanceData[this.index + 1] = v;\n        },\n      },\n      y: {\n        get: function() {\n          return this.instanceData[this.index + 2];\n        },\n        set: function(v) {\n          this.instanceData[this.index + 2] = v;\n        },\n      },\n      rotation: {\n        get: function() {\n          return this.instanceData[this.index + 3];\n        },\n        set: function(v) {\n          this.instanceData[this.index + 3] = v;\n        },\n      },\n      scaleX: {\n        get: function() {\n          return this.instanceData[this.index + 4];\n        },\n        set: function(v) {\n          this.instanceData[this.index + 4] = v;\n        },\n      },\n      scaleY: {\n        get: function() {\n          return this.instanceData[this.index + 5];\n        },\n        set: function(v) {\n          this.instanceData[this.index + 5] = v;\n        },\n      },\n      frameX: {\n        get: function() {\n          return this.instanceData[this.index + 6];\n        },\n        set: function(v) {\n          this.instanceData[this.index + 6] = v;\n        },\n      },\n      frameY: {\n        get: function() {\n          return this.instanceData[this.index + 7];\n        },\n        set: function(v) {\n          this.instanceData[this.index + 7] = v;\n        },\n      },\n      frameW: {\n        get: function() {\n          return this.instanceData[this.index + 8];\n        },\n        set: function(v) {\n          this.instanceData[this.index + 8] = v;\n        },\n      },\n      frameH: {\n        get: function() {\n          return this.instanceData[this.index + 9];\n        },\n        set: function(v) {\n          this.instanceData[this.index + 9] = v;\n        },\n      },\n      red: {\n        get: function() {\n          return this.instanceData[this.index + 10];\n        },\n        set: function(v) {\n          this.instanceData[this.index + 10] = v;\n        },\n      },\n      green: {\n        get: function() {\n          return this.instanceData[this.index + 11];\n        },\n        set: function(v) {\n          this.instanceData[this.index + 11] = v;\n        },\n      },\n      blue: {\n        get: function() {\n          return this.instanceData[this.index + 12];\n        },\n        set: function(v) {\n          this.instanceData[this.index + 12] = v;\n        },\n      },\n      alpha: {\n        get: function() {\n          return this.instanceData[this.index + 13];\n        },\n        set: function(v) {\n          this.instanceData[this.index + 13] = v;\n        },\n      },\n    },\n  });\n\n  passion.Sprite.prototype.getter(\"bulletRunning\", function() {\n    if (!this._bulletRunning) {\n      this._bulletRunning = passion.BulletRunning().attachTo(this);\n    }\n    return this._bulletRunning;\n  });\n\n});\n","phina.namespace(() => {\n\n  phina.define(\"passion.SpriteDrawer\", {\n    superClass: \"phigl.InstancedDrawable\",\n\n    objTypes: null,\n    objParameters: null,\n\n    init: function(gl, ext, w, h) {\n      this.superInit(gl, ext);\n\n      this.objTypes = [];\n      this.objParameters = {};\n\n      const shader = phigl.Program(gl)\n        .attach(\"sprites.vs\")\n        .attach(\"sprites.fs\")\n        .link();\n\n      this\n        .setProgram(shader)\n        .setDrawMode(gl.TRIANGLE_STRIP)\n        .setIndexValues([0, 1, 2, 3])\n        .setAttributes(\"position\", \"uv\")\n        .setAttributeDataArray([{\n          unitSize: 2,\n          data: [\n            //\n            -0.5, +0.5,\n            //\n            +0.5, +0.5,\n            //\n            -0.5, -0.5,\n            //\n            +0.5, -0.5,\n          ]\n        }, {\n          unitSize: 2,\n          data: [\n            //\n            0, 1,\n            //\n            1, 1,\n            //\n            0, 0,\n            //\n            1, 0,\n          ]\n        }, ])\n        .setInstanceAttributes(\n          \"instanceVisible\",\n          \"instancePosition\",\n          \"instanceRotation\",\n          \"instanceScale\",\n          \"instanceFrame\",\n          \"instanceColor\"\n        )\n        .setUniforms(\n          \"vpMatrix\",\n          \"texture\",\n          \"globalScale\"\n        );\n\n      const instanceStride = this.instanceStride / 4;\n\n      this.uniforms.globalScale.setValue(1.0);\n    },\n\n    addObjType: function(objName, options) {\n      options = {}.$extend({\n        className: \"passion.Sprite\",\n        count: 1,\n        texture: null,\n        additiveBlending: false,\n      }, options);\n\n      if (!this.objTypes.contains(objName)) {\n        const instanceStride = this.instanceStride / 4;\n\n        this.objTypes.push(objName);\n        const objParameter = this.objParameters[objName] = {\n          count: options.count,\n          instanceVbo: phigl.Vbo(this.gl, this.gl.DYNAMIC_DRAW),\n          texture: phigl.Texture(this.gl, options.texture),\n          pool: null,\n          additiveBlending: options.additiveBlending,\n          instanceData: Array.range(options.count).map(i => {\n            return [\n              // visible\n              0,\n              // position\n              0, 0,\n              // rotation\n              0,\n              // scale\n              0, 0,\n              // frame\n              0, 0, 0, 0,\n              // rgba\n              0, 0, 0, 0,\n            ];\n          }).flatten(),\n        };\n\n        const ObjClass = phina.using(options.className);\n        objParameter.pool = Array.range(options.count).map(id => {\n          const s = ObjClass(id, objParameter.instanceData, instanceStride);\n          s.on(\"removed\", () => objParameter.pool.push(s));\n          return s;\n        });\n      }\n    },\n\n    get: function(objName) {\n      return this.objParameters[objName].pool.shift();\n    },\n\n    update: function() {},\n\n    render: function(uniforms) {\n      if (this.objTypes.length === 0) return;\n\n      const gl = this.gl;\n      // gl.enable(gl.BLEND);\n      // gl.disable(gl.DEPTH_TEST);\n\n      this.uniforms.globalScale.value = 1.0;\n\n      if (uniforms) {\n        uniforms.forIn((key, value) => {\n          if (this.uniforms[key]) this.uniforms[key].value = value;\n        });\n      }\n      this.objTypes.forEach(objName => {\n        const objParameter = this.objParameters[objName];\n\n        if (objParameter.additiveBlending) {\n          gl.blendFunc(gl.SRC_ALPHA, gl.ONE);\n        } else {\n          gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n        }\n\n        this.setInstanceAttributeVbo(\n          objParameter.instanceVbo.set(objParameter.instanceData)\n        );\n        this.uniforms.texture.setValue(0).setTexture(objParameter.texture);\n        this.draw(objParameter.count);\n      });\n    },\n  });\n\n});\n","phina.namespace(() => {\n\n  phina.define(\"passion.BossHpGauge\", {\n    superClass: \"phina.display.Shape\",\n\n    init: function(options) {\n      this.superInit(options);\n      this.backgroundColor = \"transparent\";\n      this.strokeWidth = 2;\n      this.fill = null;\n\n      const canvas = phina.graphics.Canvas().setSize(this.width, this.height);\n      const c = canvas.context;\n\n      const sg = c.createLinearGradient(this.height / 2, -this.width / 2, -this.height / 2, this.width / 2);\n      sg.addColorStop(0.00, \"hsla(190, 100%, 30%, 1.0)\");\n      sg.addColorStop(0.38, \"hsla(190, 100%, 30%, 1.0)\");\n      sg.addColorStop(0.48, \"hsla(190, 100%, 80%, 1.0)\");\n      sg.addColorStop(0.52, \"hsla(190, 100%, 80%, 1.0)\");\n      sg.addColorStop(0.62, \"hsla(190, 100%, 30%, 1.0)\");\n      sg.addColorStop(1.00, \"hsla(190, 100%, 30%, 1.0)\");\n      this.stroke = sg;\n    },\n\n    prerender: function(canvas) {\n      const c = canvas.context;\n\n      c.beginPath();\n      c.moveTo(-this.width / 2.05, -this.height / 3);\n      c.lineTo(-this.width / 8, -this.height / 3);\n      c.lineTo(-this.width / 12, -this.height / 10);\n      c.lineTo(this.width / 12, -this.height / 10);\n      c.lineTo(this.width / 8, -this.height / 3);\n      c.lineTo(this.width / 2.05, -this.height / 3);\n      c.lineTo(this.width / 2, this.height / 10);\n      c.lineTo(this.width / 8, this.height / 10);\n      c.lineTo(this.width / 12, this.height / 3);\n      c.lineTo(-this.width / 12, this.height / 3);\n      c.lineTo(-this.width / 8, this.height / 10);\n      c.lineTo(-this.width / 2, this.height / 10);\n      c.closePath();\n    },\n\n    postrender: function(canvas) {\n      const c = canvas.context;\n\n      c.beginPath();\n      c.moveTo(-3 + -this.width / 2 + 5, -3 + -this.height / 3);\n      c.lineTo(+3 + -this.width / 8, -3 + -this.height / 3);\n      c.lineTo(+3 + -this.width / 12, -3 + -this.height / 10);\n      c.lineTo(-3 + this.width / 12, -3 + -this.height / 10);\n      c.lineTo(-3 + this.width / 8, -3 + -this.height / 3);\n      c.lineTo(+3 + this.width / 2 - 5, -3 + -this.height / 3);\n      c.lineTo(+3 + this.width / 2, +3 + this.height / 10);\n      c.lineTo(+3 + this.width / 8, +3 + this.height / 10);\n      c.lineTo(+3 + this.width / 12, +3 + this.height / 3);\n      c.lineTo(-3 + -this.width / 12, +3 + this.height / 3);\n      c.lineTo(-3 + -this.width / 8, +3 + this.height / 10);\n      c.lineTo(-3 + -this.width / 2, +3 + this.height / 10);\n      c.closePath();\n\n      c.lineWidth = 1;\n      c.stroke();\n    },\n  });\n\n  phina.define(\"passion.BossHpGaugeValue\", {\n    superClass: \"passion.BossHpGauge\",\n\n    value: 0,\n    maxValue: 100,\n\n    init: function(options) {\n      this.superInit(options);\n      this.fill = \"hsla(210, 80%, 40%, 0.9)\";\n      this.stroke = null;\n    },\n\n    clip: function(canvas) {\n      const c = canvas.context;\n\n      const v = Math.clamp(this.value / this.maxValue, 0, 1);\n\n      c.beginPath();\n      c.moveTo(-this.width / 2, -this.height / 2);\n      c.lineTo(-this.width / 2 + this.width * v, -this.height / 2);\n      c.lineTo(-this.width / 2 + this.width * v, +this.height / 2);\n      c.lineTo(-this.width / 2, +this.height / 2);\n      c.closePath();\n\n      c.clip();\n    },\n\n    postrender: function() {},\n  });\n\n});\n","phina.namespace(() => {\n\n  phina.define(\"passion.UIFrame\", {\n    superClass: \"phina.display.Shape\",\n\n    init: function(options) {\n      this.superInit(options);\n      this.backgroundColor = \"transparent\";\n      this.strokeWidth = 2;\n    },\n\n    prerender: function(canvas) {\n      const c = canvas.context;\n\n      c.beginPath();\n      c.moveTo(-this.width / 2 + 10, -this.height / 2);\n      c.lineTo(this.width / 2 - 5, -this.height / 2);\n      c.lineTo(this.width / 2, -this.height / 2 + 5);\n      c.lineTo(this.width / 2, this.height / 2 - 10);\n      c.lineTo(this.width / 2 - 10, this.height / 2);\n      c.lineTo(-this.width / 2 + 35, this.height / 2);\n      c.lineTo(-this.width / 2 + 30, this.height / 2 - 5);\n      c.lineTo(-this.width / 2, this.height / 2 - 5);\n      c.lineTo(-this.width / 2, 10 - this.height / 2);\n      c.closePath();\n\n      const sg = c.createLinearGradient(this.height / 2, -this.width / 2, -this.height / 2, this.width / 2);\n      sg.addColorStop(0.00, \"hsla(190, 100%, 30%, 0.8)\");\n      sg.addColorStop(0.38, \"hsla(190, 100%, 30%, 0.8)\");\n      sg.addColorStop(0.48, \"hsla(190, 100%, 80%, 0.8)\");\n      sg.addColorStop(0.52, \"hsla(190, 100%, 80%, 0.8)\");\n      sg.addColorStop(0.62, \"hsla(190, 100%, 30%, 0.8)\");\n      sg.addColorStop(1.00, \"hsla(190, 100%, 30%, 0.8)\");\n      this.stroke = sg;\n\n      const fg = c.createLinearGradient(this.height / 2, -this.width / 2, -this.height / 2, this.width / 2);\n      fg.addColorStop(0.00, \"hsla(210, 100%, 30%, 0.2)\");\n      fg.addColorStop(0.38, \"hsla(210, 100%, 30%, 0.2)\");\n      fg.addColorStop(0.48, \"hsla(210, 100%, 80%, 0.2)\");\n      fg.addColorStop(0.52, \"hsla(210, 100%, 80%, 0.2)\");\n      fg.addColorStop(0.62, \"hsla(210, 100%, 30%, 0.2)\");\n      fg.addColorStop(1.00, \"hsla(210, 100%, 30%, 0.2)\");\n      this.fill = fg;\n    },\n\n    postrender: function(canvas) {\n      const c = canvas.context;\n\n      c.beginPath();\n      c.moveTo(-this.width / 2 + 10 - 3, -this.height / 2 - 3);\n      c.lineTo(this.width / 2 - 5 + 3, -this.height / 2 - 3);\n      c.lineTo(this.width / 2 + 3, -this.height / 2 + 5 - 3);\n      c.lineTo(this.width / 2 + 3, this.height / 2 - 10 + 3);\n      c.lineTo(this.width / 2 - 10 + 3, this.height / 2 + 3);\n      c.lineTo(-this.width / 2 + 35 - 3, this.height / 2 + 3);\n      c.lineTo(-this.width / 2 + 30 - 3, this.height / 2 - 5 + 3);\n      c.lineTo(-this.width / 2 - 3, this.height / 2 - 5 + 3);\n      c.lineTo(-this.width / 2 - 3, -this.height / 2 + 10 - 3);\n      c.closePath();\n\n      c.lineWidth = 1;\n      c.stroke();\n    },\n\n  });\n});\n","phina.namespace(() => {\n\n  phina.define(\"passion.UIHeadLabel\", {\n    superClass: \"phina.display.Shape\",\n\n    init: function(options) {\n      this.superInit(options);\n      this.backgroundColor = \"transparent\";\n      this.stroke = \"hsla(190, 100%, 60%, 1.0)\";\n      this.strokeWidth = 1;\n      this.fromJSON({\n        children: {\n          text: {\n            className: \"phina.display.Label\",\n            arguments: {\n              text: options.text,\n              fontSize: options.fontSize || 24,\n              // fontWeight: \"bold\",\n              fontFamily: options.fontFamily || \"main\",\n              align: options.align || \"center\",\n            },\n            fill: \"hsla(190, 100%, 95%, 0.8)\",\n            strokeWidth: 0,\n          },\n        },\n      });\n    },\n\n    prerender: function(canvas) {\n      const c = canvas.context;\n      const fg = c.createLinearGradient(0, -this.height / 2, 0, this.height / 2);\n      fg.addColorStop(0.00, \"hsla(190, 100%, 50%, 0.2)\");\n      fg.addColorStop(0.40, \"hsla(190, 100%, 30%, 0.2)\");\n      fg.addColorStop(0.60, \"hsla(190, 100%, 30%, 0.2)\");\n      fg.addColorStop(1.00, \"hsla(190, 100%, 50%, 0.2)\");\n      this.fill = fg;\n    },\n\n    postrender: function(canvas) {\n      const c = canvas.context;\n\n      c.beginPath();\n      c.moveTo(-this.width / 2, this.height / 2);\n      c.lineTo(-this.width / 2, -this.height / 2 + 10);\n      c.lineTo(-this.width / 2 + 10, -this.height / 2);\n      c.lineTo(this.width / 2, -this.height / 2);\n      c.lineTo(this.width / 2, this.height / 2 - 10);\n      c.lineTo(this.width / 2 - 10, this.height / 2);\n      c.closePath();\n      c.fill();\n\n      c.beginPath();\n      c.moveTo(-this.width / 2, this.height / 2);\n      c.lineTo(-this.width / 2, -this.height / 2 + 10);\n      c.lineTo(-this.width / 2 + 10, -this.height / 2);\n      c.stroke();\n\n      c.beginPath();\n      c.moveTo(this.width / 2, -this.height / 2);\n      c.lineTo(this.width / 2, this.height / 2 - 10);\n      c.lineTo(this.width / 2 - 10, this.height / 2);\n      c.stroke();\n    },\n\n  });\n});\n\nphina.namespace(() => {\n\n  phina.define(\"passion.UIHead2Label\", {\n    superClass: \"phina.display.Shape\",\n\n    init: function(options) {\n      this.superInit(options);\n      this.backgroundColor = \"transparent\";\n      this.strokeWidth = 1;\n      this.fromJSON({\n        children: {\n          text: {\n            className: \"phina.display.Label\",\n            arguments: {\n              text: options.text,\n              fontSize: options.fontSize || 24,\n              // fontWeight: \"bold\",\n              fontFamily: options.fontFamily || \"main\",\n              align: options.align || \"center\",\n            },\n            fill: \"hsla(190, 100%, 95%, 0.8)\",\n            strokeWidth: 0,\n          },\n        },\n      });\n    },\n\n    prerender: function(canvas) {\n      const c = canvas.context;\n\n      const fg = c.createLinearGradient(0, -this.height / 2, 0, this.height / 2);\n      fg.addColorStop(0.00, \"hsla(190, 100%, 50%, 0.2)\");\n      fg.addColorStop(0.40, \"hsla(190, 100%, 30%, 0.2)\");\n      fg.addColorStop(0.60, \"hsla(190, 100%, 30%, 0.2)\");\n      fg.addColorStop(1.00, \"hsla(190, 100%, 50%, 0.2)\");\n      this.fill = fg;\n\n      const sg = c.createLinearGradient(-this.width / 2, 0, this.width / 2, 0);\n      sg.addColorStop(0.00, \"hsla(190, 100%, 60%, 0.0)\");\n      sg.addColorStop(0.30, \"hsla(190, 100%, 60%, 1.0)\");\n      sg.addColorStop(0.70, \"hsla(190, 100%, 60%, 1.0)\");\n      sg.addColorStop(1.00, \"hsla(190, 100%, 60%, 0.0)\");\n      this.stroke = sg;\n    },\n\n    postrender: function(canvas) {\n      const c = canvas.context;\n\n      c.beginPath();\n      c.moveTo(-this.width / 2, this.height / 2);\n      c.lineTo(-this.width / 2, -this.height / 2);\n      c.lineTo(this.width / 2, -this.height / 2);\n      c.lineTo(this.width / 2, this.height / 2);\n      c.closePath();\n      c.fill();\n\n      c.beginPath();\n      c.moveTo(-this.width / 2, this.height / 2);\n      c.lineTo(this.width / 2, this.height / 2);\n      c.stroke();\n\n      c.beginPath();\n      c.moveTo(-this.width / 2, -this.height / 2);\n      c.lineTo(this.width / 2, -this.height / 2);\n      c.stroke();\n    },\n\n  });\n});\n","phina.namespace(() => {\n\n  phina.define(\"passion.UILayer\", {\n    superClass: \"phina.display.DisplayElement\",\n\n    init: function(gameManager) {\n      this.superInit();\n      this.fromJSON({\n        originX: 0,\n        originY: 0,\n        children: {\n          damage: {\n            className: \"phina.display.Sprite\",\n            arguments: this.damageTexture(),\n            originX: 0,\n            originY: 0,\n            alpha: 0.0,\n            x: GAME_AREA_WIDTH * passion.GLLayer.padding,\n            y: GAME_AREA_HEIGHT * passion.GLLayer.padding,\n          },\n          bossHpGauge: {\n            className: \"phina.display.DisplayElement\",\n            x: SCREEN_WIDTH * 0.5,\n            y: SCREEN_HEIGHT * 0.025,\n            visible: false,\n            children: {\n              inner: {\n                className: \"passion.BossHpGaugeValue\",\n                arguments: {\n                  width: SCREEN_WIDTH * 0.92,\n                  height: SCREEN_HEIGHT * 0.03,\n                },\n                value: 100,\n                maxValue: 100,\n              },\n              outer: {\n                className: \"passion.BossHpGauge\",\n                arguments: {\n                  width: SCREEN_WIDTH * 0.92,\n                  height: SCREEN_HEIGHT * 0.03,\n                },\n              },\n            },\n          },\n          scoreBg: {\n            className: \"passion.UIFrame\",\n            arguments: {\n              width: SCREEN_WIDTH * 0.96,\n              height: SCREEN_HEIGHT * 0.05,\n            },\n            x: 0,\n            y: SCREEN_HEIGHT * 0.00,\n            originX: 0,\n            originY: 0,\n            // scaleX: 0.60,\n            // scaleY: 0.60,\n            children: {\n              scoreLabel: {\n                className: \"phina.display.Label\",\n                arguments: {\n                  text: \"9,991,234,567,890\",\n                  align: \"right\",\n                  baseline: \"middle\",\n                  fontSize: SCREEN_HEIGHT * 0.035,\n                },\n                x: SCREEN_WIDTH * 0.96,\n                y: SCREEN_HEIGHT * 0.038,\n              },\n              hi: {\n                className: \"phina.display.Label\",\n                arguments: {\n                  text: \"HI\",\n                  align: \"left\",\n                  baseline: \"middle\",\n                  fontSize: SCREEN_HEIGHT * 0.025,\n                },\n                x: SCREEN_WIDTH * 0.04,\n                y: SCREEN_HEIGHT * 0.035,\n              },\n              highscoreLabel: {\n                className: \"phina.display.Label\",\n                arguments: {\n                  text: \"9,991,234,567,890\",\n                  align: \"right\",\n                  baseline: \"middle\",\n                  fontSize: SCREEN_HEIGHT * 0.025,\n                },\n                x: SCREEN_WIDTH * 0.44,\n                y: SCREEN_HEIGHT * 0.035,\n              },\n            },\n          },\n          messageWindow: {\n            className: \"passion.UIFrame\",\n            arguments: {\n              width: SCREEN_WIDTH * 0.96,\n              height: SCREEN_HEIGHT * 0.14,\n            },\n            x: SCREEN_WIDTH * 0.0,\n            y: SCREEN_HEIGHT * 0.84,\n            originX: 0,\n            originY: 0,\n            // visible: false,\n            children: {\n              nameLabel: {\n                className: \"passion.UIHead2Label\",\n                arguments: {\n                  text: \"オペ子\",\n                  width: SCREEN_WIDTH * 0.30,\n                  height: SCREEN_HEIGHT * 0.03,\n                  fontSize: 18,\n                  fontFamily: \"main, message\",\n                },\n                x: SCREEN_WIDTH * 0.20,\n                y: SCREEN_HEIGHT * 0.034,\n                visible: false,\n              },\n              mesasgeLabel: {\n                className: \"phina.display.Label\",\n                arguments: {\n                  text: \"WARNING!!\\n今までにない強大な力が近づいてきます！\\n気をつけてください！！\",\n                  align: \"left\",\n                  baseline: \"top\",\n                  fontSize: 16,\n                  lineHeight: 1.1,\n                  fontFamily: \"main, message\",\n                },\n                x: SCREEN_WIDTH * 0.05,\n                y: SCREEN_HEIGHT * 0.076,\n                visible: false,\n              },\n            },\n          },\n          bombButton: {\n            className: \"passion.CircleButton\",\n            arguments: {\n              text: \"HYPER\",\n              fontSize: 15,\n              radius: GAME_AREA_WIDTH * 0.09,\n            },\n            x: GAME_AREA_WIDTH * 0.12,\n            y: GAME_AREA_HEIGHT * 0.92,\n          },\n          readyLabels: {\n            className: \"phina.display.DisplayElement\",\n            x: GAME_AREA_WIDTH * 0.5,\n            y: GAME_AREA_HEIGHT * 0.5,\n            children: \"Ready\".split(\"\").map((c, i) => {\n              return {\n                className: \"phina.display.Label\",\n                arguments: {\n                  text: c,\n                  align: \"center\",\n                  baseline: \"middle\",\n                  fontSize: 60,\n                },\n                x: (\"Ready\".length * -0.5 + i + 0.5) * 60 * 0.56,\n              };\n            }),\n            visible: false,\n          },\n          goLabel: {\n            className: \"phina.display.Label\",\n            arguments: {\n              text: \"GO!!\",\n              align: \"center\",\n              baseline: \"middle\",\n              fontSize: 60,\n            },\n            x: GAME_AREA_WIDTH * 0.5,\n            y: GAME_AREA_HEIGHT * 0.5,\n            visible: false,\n          }\n        },\n      });\n\n      gameManager.on(\"updateScore\", e => {\n        this.scoreBg.scoreLabel.text = passion.Utils.sep(gameManager.score);\n        if (gameManager.highScore < gameManager.score) {\n          this.scoreBg.highscoreLabel.text = passion.Utils.sep(gameManager.highScore);\n        }\n      });\n      gameManager.on(\"damaged\", e => {});\n    },\n\n    showReadyGo: function(callback) {\n      this.readyLabels.visible = true;\n      this.goLabel.visible = true;\n\n      this.readyLabels.children.forEach((label, i) => {\n        label.tweener\n          .set({\n            scaleX: 4,\n            scaleY: 4,\n            alpha: 0,\n          })\n          .wait(i * 200)\n          .to({\n            scaleX: 1,\n            scaleY: 1,\n            alpha: 1\n          }, 200)\n          .wait(500 + (\"Ready\".length - i) * 200)\n          .to({\n            scaleX: 0,\n            scaleY: 0,\n            alpha: 0,\n          }, 100);\n      });\n      this.goLabel.tweener\n        .set({\n          scaleX: 0,\n          scaleY: 0,\n          alpha: 0,\n        })\n        .wait(900 + \"Ready\".length * 200)\n        .to({\n          scaleX: 1,\n          scaleY: 1,\n          alpha: 1\n        }, 200)\n        .wait(500)\n        .to({\n          scaleX: 5,\n          scaleY: 5,\n          alpha: 0,\n        }, 200)\n        .call(() => {\n          this.readyLabels.visible = false;\n          this.goLabel.visible = false;\n          callback();\n        });\n    },\n\n    damageTexture: function() {\n      const c = phina.graphics.Canvas();\n      const p = passion.GLLayer.padding;\n      c.setSize(GAME_AREA_WIDTH * (1 - p * 2), GAME_AREA_HEIGHT * (1 - p * 2));\n      c.clearColor(\"transparent\");\n      const g = c.context.createRadialGradient(c.width / 2, c.height / 2, 0, c.width / 2, c.height / 2, c.height / 2)\n      g.addColorStop(0, \"rgba(255, 0, 0, 0.0)\");\n      g.addColorStop(1, \"rgba(255, 0, 0, 1.0)\");\n      c.fillStyle = g;\n      c.fillRect(0, 0, c.width, c.height);\n      return c;\n    },\n\n    showBoss: function() {\n      this.scoreBg.tweener\n        .clear()\n        .to({\n          y: 0\n        })\n    }\n\n  });\n});\n","phina.namespace(() => {\n\n  phina.define(\"passion.BulletRunning\", {\n    superClass: \"phina.accessory.Accessory\",\n\n    runner: null,\n\n    init: function() {\n      this.superInit();\n    },\n\n    setRunner: function(runner) {\n      this.runner = runner;\n      if (this.target && runner) {\n        this.target.x = runner.x;\n        this.target.y = runner.y;\n        this.target.rotation = runner.direction;\n        runner.onVanish = () => this.target.remove();\n      }\n      return this;\n    },\n\n    update: function(app) {\n      if (this.runner) {\n        this.runner.update();\n        this.target.x = this.runner.x;\n        this.target.y = this.runner.y;\n        this.target.rotation = this.runner.direction;\n      }\n    },\n\n  });\n});\n","phina.namespace(() => {\n\n  phina.define(\"passion.GameSceneBg\", {\n    _static: {\n      drawBgTexture: function() {\n        const bgTexture = phina.graphics.Canvas();\n        bgTexture.setSize(SCREEN_WIDTH, SCREEN_HEIGHT);\n        bgTexture.clearColor(\"hsla(190, 100%, 95%, 0.05)\");\n        (150).times((i, j) => {\n          let y = (SCREEN_HEIGHT * 1.5) / j * i;\n          bgTexture.strokeStyle = \"hsla(190, 100%, 95%, 0.1)\";\n          bgTexture.strokeLines(\n            SCREEN_WIDTH * 0.0, y - 10,\n            SCREEN_WIDTH * 0.1, y - 10,\n            SCREEN_WIDTH * 0.2, y + 20,\n            SCREEN_WIDTH * 0.5, y + 20,\n            SCREEN_WIDTH * 0.6, y - 30,\n            SCREEN_WIDTH * 0.7, y - 30,\n            SCREEN_WIDTH * 0.8, y - 50,\n            SCREEN_WIDTH * 1.0, y - 50\n          );\n          bgTexture.strokeStyle = \"hsla(190, 100%, 65%, 0.1)\";\n          y += 1;\n          bgTexture.strokeLines(\n            SCREEN_WIDTH * 0.0, y - 10,\n            SCREEN_WIDTH * 0.1, y - 10,\n            SCREEN_WIDTH * 0.2, y + 20,\n            SCREEN_WIDTH * 0.5, y + 20,\n            SCREEN_WIDTH * 0.6, y - 30,\n            SCREEN_WIDTH * 0.7, y - 30,\n            SCREEN_WIDTH * 0.8, y - 50,\n            SCREEN_WIDTH * 1.0, y - 50\n          );\n          bgTexture.strokeStyle = \"hsla(190, 100%, 35%, 0.1)\";\n          y += 1;\n          bgTexture.strokeLines(\n            SCREEN_WIDTH * 0.0, y - 10,\n            SCREEN_WIDTH * 0.1, y - 10,\n            SCREEN_WIDTH * 0.2, y + 20,\n            SCREEN_WIDTH * 0.5, y + 20,\n            SCREEN_WIDTH * 0.6, y - 30,\n            SCREEN_WIDTH * 0.7, y - 30,\n            SCREEN_WIDTH * 0.8, y - 50,\n            SCREEN_WIDTH * 1.0, y - 50\n          );\n        });\n        return bgTexture;\n      },\n    },\n\n    init: function() {},\n  });\n\n});\n","phina.namespace(() => {\n\n  phina.define(\"passion.GamepadManager\", {\n    superClass: \"phina.input.GamepadManager\",\n\n    init: function() {\n      this.superInit();\n    },\n\n    get: function(index) {\n      index = index || 0;\n\n      if (!this.gamepads[index]) {\n        this._created.push(index);\n        this.gamepads[index] = passion.Gamepad(index);\n      }\n\n      return this.gamepads[index];\n    },\n\n  });\n\n  phina.define(\"passion.Gamepad\", {\n    superClass: \"phina.input.Gamepad\",\n\n    beforeStickX: 0,\n    beforeStickY: 0,\n\n    _leftCount: 0,\n    _rightCount: 0,\n    _upCount: 0,\n    _downCount: 0,\n\n    init: function(index) {\n      this.superInit(index);\n    },\n\n    _updateState: function(gamepad) {\n      this.superMethod(\"_updateState\", gamepad);\n      this._updateEvery();\n    },\n    _updateStateEmpty: function() {\n      this.superMethod(\"_updateStateEmpty\");\n      this._updateEvery();\n    },\n\n    _updateEvery: function() {\n      const stick = this.getStickDirection();\n\n      if (this.getKeyUp(\"left\") || this.beforeStickX < -0.5 && -0.5 <= stick.x) {\n        this._leftCount = 0;\n      } else if (this.getKey(\"left\") || stick.x < -0.5) {\n        this._leftCount += 1;\n      }\n      if (this.getKeyUp(\"right\") || 0.5 < this.beforeStickX && stick.x <= 0.5) {\n        this._rightCount = 0;\n      } else if (this.getKey(\"right\") || 0.5 < stick.x) {\n        this._rightCount += 1;\n      }\n      if (this.getKeyUp(\"up\") || this.beforeStickY < -0.5 && -0.5 <= stick.y) {\n        this._upCount = 0;\n      } else if (this.getKey(\"up\") || stick.y < -0.5) {\n        this._upCount += 1;\n      }\n      if (this.getKeyUp(\"down\") || 0.5 < this.beforeStickY && stick.y <= 0.5) {\n        this._downCount = 0;\n      } else if (this.getKey(\"down\") || 0.5 < stick.y) {\n        this._downCount += 1;\n      }\n\n      this.beforeStickX = stick.x;\n      this.beforeStickY = stick.y;\n    },\n\n    _accessor: {\n      leftPressing: {\n        get: function() {\n          const count = this._leftCount;\n          const current = this.getKey(\"left\") || this.getStickDirection().x < -0.5;\n          return current && (count == 1 || (40 < count && count % 6 == 0));\n        }\n      },\n      rightPressing: {\n        get: function() {\n          const count = this._rightCount;\n          const current = this.getKey(\"right\") || 0.5 < this.getStickDirection().x;\n          return current && (count == 1 || (40 < count && count % 6 == 0));\n        }\n      },\n      upPressing: {\n        get: function() {\n          const count = this._upCount;\n          const current = this.getKey(\"up\") || this.getStickDirection().y < -0.5;\n          return current && (count == 1 || (40 < count && count % 6 == 0));\n        }\n      },\n      downPressing: {\n        get: function() {\n          const count = this._downCount;\n          const current = this.getKey(\"down\") || 0.5 < this.getStickDirection().y;\n          return current && (count == 1 || (40 < count && count % 6 == 0));\n        }\n      },\n    }\n\n  });\n\n});\n","phina.namespace(() => {\n\n  phina.define(\"passion.Keyboard\", {\n    superClass: \"phina.input.Keyboard\",\n\n    _leftCount: 0,\n    _rightCount: 0,\n    _upCount: 0,\n    _downCount: 0,\n\n    init: function(domElement) {\n      this.superInit(domElement);\n    },\n\n    update: function() {\n      this.superMethod(\"update\");\n\n      if (this.getKeyUp(\"left\")) {\n        this._leftCount = 0;\n      } else if (this.getKey(\"left\")) {\n        this._leftCount += 1;\n      }\n      if (this.getKeyUp(\"right\")) {\n        this._rightCount = 0;\n      } else if (this.getKey(\"right\")) {\n        this._rightCount += 1;\n      }\n      if (this.getKeyUp(\"up\")) {\n        this._upCount = 0;\n      } else if (this.getKey(\"up\")) {\n        this._upCount += 1;\n      }\n      if (this.getKeyUp(\"down\")) {\n        this._downCount = 0;\n      } else if (this.getKey(\"down\")) {\n        this._downCount += 1;\n      }\n    },\n\n    _accessor: {\n      leftPressing: {\n        get: function() {\n          const count = this._leftCount;\n          const current = this.getKey(\"left\");\n          return current && (count == 1 || (40 < count && count % 6 == 0));\n        }\n      },\n      rightPressing: {\n        get: function() {\n          const count = this._rightCount;\n          const current = this.getKey(\"right\");\n          return current && (count == 1 || (40 < count && count % 6 == 0));\n        }\n      },\n      upPressing: {\n        get: function() {\n          const count = this._upCount;\n          const current = this.getKey(\"up\");\n          return current && (count == 1 || (40 < count && count % 6 == 0));\n        }\n      },\n      downPressing: {\n        get: function() {\n          const count = this._downCount;\n          const current = this.getKey(\"down\");\n          return current && (count == 1 || (40 < count && count % 6 == 0));\n        }\n      },\n    },\n    \n    _static: phina.input.Keyboard._static,\n\n  });\n\n});\n","phina.namespace(() => {\r\n\r\n  phina.define(\"passion.PointerLock\", {\r\n    superClass: \"phina.util.EventDispatcher\",\r\n\r\n    domElement: null,\r\n\r\n    init: function(domElement) {\r\n      this.superInit();\r\n      this.domElement = domElement;\r\n\r\n      this.domElement.requestPointerLock = this.domElement.requestPointerLock || this.domElement.mozRequestPointerLock || (() => {});\r\n      this.domElement.exitPointerLock = this.domElement.exitPointerLock || this.domElement.mozExitPointerLock || (() => {});\r\n\r\n      if (\"onpointerlockchange\" in this.domElement) {\r\n        this.domElement.addEventListener(\"pointerlockchange\", e => {\r\n          this.flare(\"change\");\r\n        }, false);\r\n      } else {\r\n        this.domElement.addEventListener(\"mozpointerlockchange\", e => {\r\n          this.flare(\"change\");\r\n        }, false);\r\n      }\r\n    },\r\n\r\n    // https://developer.mozilla.org/ja/docs/API/Pointer_Lock_API\r\n    lock: function() {\r\n      this.domElement.requestPointerLock();\r\n    },\r\n\r\n    exit: function() {\r\n      this.domElement.exitPointerLock();\r\n    },\r\n\r\n  });\r\n\r\n  phina.define(\"passion.LockedMouse\", {\r\n    superClass: \"phina.input.Input\",\r\n\r\n    init: function(domElement) {\r\n      this.superInit(domElement);\r\n    },\r\n  });\r\n\r\n});","phina.namespace(() => {\n\n  phina.define(\"passion.GameScene\", {\n    superClass: \"phina.display.DisplayScene\",\n\n    gameManager: null,\n    status: -1,\n\n    shots: null,\n    enemies: null,\n    bullets: null,\n    items: null,\n\n    init: function(options) {\n      this.superInit(options);\n\n      const gameScene = this;\n      const stageData = phina.asset.AssetManager.get(\"json\", \"stage\").data;\n\n      const r = phina.util.Random(12345);\n      const randomFunc = () => r.random();\n      bulletml.Walker.random = randomFunc;\n\n      this.gameManager = passion.GameManager(stageData, randomFunc);\n\n      this.fromJSON({\n        shots: [],\n        enemies: [],\n        bullets: [],\n        items: [],\n        children: {\n          bg: {\n            className: \"phina.display.Sprite\",\n            arguments: passion.GameSceneBg.drawBgTexture(),\n            originX: 0,\n            originY: 0,\n          },\n          glLayer: {\n            className: \"passion.GLLayer\",\n          },\n          uiLayer: {\n            className: \"passion.UILayer\",\n            arguments: this.gameManager,\n            alpha: 0,\n          },\n        },\n      });\n\n      this.uiLayer.tweener.clear().fadeIn(500);\n\n      const gameManager = this.gameManager;\n      const glLayer = this.glLayer;\n\n      glLayer.effectDrawer.addObjType(\"particle\", {\n        texture: \"texture0.png\",\n        additiveBlending: true,\n        count: 200,\n      });\n      glLayer.topEffectDrawer.addObjType(\"BulletEraseEffect\", {\n        className: \"passion.BulletEraseEffect\",\n        texture: \"bullets_erase.png\",\n        count: 200,\n      });\n      glLayer.topEffectDrawer.addObjType(\"particle\", {\n        className: \"passion.Particle\",\n        texture: \"texture0.png\",\n        count: 200,\n        additiveBlending: true,\n      });\n\n      // 背景\n      passion.Background.setup(glLayer, \"bg\", 1069);\n\n      // 自機\n      const playerSpec = {\n        hp: 100,\n      };\n      this.player = passion.Player.setup(glLayer, playerSpec).addChildTo(glLayer);\n\n      // ショット\n      const shotClassName = \"passion.WideShot2\";\n      const ShotClass = phina.using(shotClassName);\n      ShotClass.setup(shotClassName, glLayer, this.player, this.shots, gameScene);\n\n      // 敵\n      stageData.enemies\n        .map(enemy => phina.asset.AssetManager.get(\"json\", enemy + \".enemy\").data)\n        .map(enemyData => enemyData.texture)\n        .uniq()\n        .forEach(textureName => {\n          glLayer.enemyDrawer.addObjType(textureName, {\n            className: \"passion.Enemy\",\n            texture: textureName,\n            count: 50,\n          });\n          glLayer.enemyDrawer.objParameters[textureName].pool.forEach(enemy => {\n            enemy.on(\"removed\", e => enemies.erase(enemy));\n            enemy.on(\"killed\", e => enemy.playKilledEffect(gameScene));\n          });\n        });\n      const enemies = this.enemies;\n      gameManager.on(\"spawnEnemy\", e => {\n        const enemyData = phina.asset.AssetManager.get(\"json\", e.name + \".enemy\").data;\n        const enemy = glLayer.enemyDrawer.get(enemyData.texture)\n        if (enemy) {\n          enemy.spawn({}.$extend(enemyData, e, { x: e.x * GAME_AREA_WIDTH, y: e.y * GAME_AREA_HEIGHT }));\n          enemy.addChildTo(glLayer);\n          enemies.push(enemy);\n        }\n      });\n\n      // 弾\n      passion.Danmaku.setup(this);\n      const bullets = this.bullets;\n      this.on(\"spawnBullet\", e => {\n        const bullet = e.bullet;\n        bullet.addChildTo(glLayer);\n        bullets.push(bullet);\n      });\n      glLayer.bulletDrawer.pool.array.forEach(bullet => {\n        bullet.on(\"removed\", e => bullets.erase(e));\n        bullet.on(\"erased\", e => {\n          const effect = glLayer.topEffectDrawer.get(\"BulletEraseEffect\");\n          if (effect) {\n            effect\n              .spawn({\n                x: bullet.x,\n                y: bullet.y,\n                frameY: 0,\n              })\n              .addChildTo(glLayer);\n          }\n        });\n      });\n\n      this.uiLayer.showReadyGo(() => gameScene.status = 0);\n    },\n\n    update: function(app) {\n      switch (this.status) {\n        case 0:\n          this.gameManager.update(app);\n          this._hitTest();\n          break;\n      }\n\n      const kb = app.keyboardEx;\n      const gp = app.gamepadManager.get();\n      if (gp.leftPressing || kb.leftPressing) console.log(\"left\" + Date.now());\n      if (gp.rightPressing || kb.rightPressing) console.log(\"right\" + Date.now());\n      if (gp.upPressing || kb.upPressing) console.log(\"up\" + Date.now());\n      if (gp.downPressing || kb.downPressing) console.log(\"down\" + Date.now());\n    },\n\n    _hitTest: function() {\n      this._hitTestItemPlayer();\n      this._hitTestEnemyShot();\n      this._hitTestEnemyPlayer();\n      this._hitTestBulletPlayer();\n    },\n\n    _hitTestItemPlayer: function() {},\n\n    _hitTestEnemyShot: function() {\n      const es = this.enemies.clone();\n      const ss = this.shots.clone();\n      for (let i = 0; i < es.length; i++) {\n        const e = es[i];\n        for (let j = 0; j < ss.length; j++) {\n          const s = ss[j];\n          if (e.isHit(s)) {\n            e.flare(\"damaged\", { shot: s });\n            s.flare(\"hit\", { enemy: e });\n          }\n        }\n      }\n    },\n\n    _hitTestEnemyPlayer: function() {\n      const es = this.enemies.clone();\n      const p = this.player;\n      for (let i = 0; i < es.length; i++) {\n        const e = es[i];\n        if (e.isHit(p)) {\n          p.flare(\"damaged\", { another: e });\n        }\n      }\n    },\n\n    _hitTestBulletPlayer: function() {\n      const bs = this.bullets.clone();\n      const p = this.player;\n      for (let i = 0; i < bs.length; i++) {\n        const b = bs[i];\n        if (b.isHit(p)) {\n          p.flare(\"damaged\", { another: b });\n          b.remove();\n        }\n      }\n    },\n\n    eraseAllBullets: function() {\n      this.bullets.clone().forEach(bullet => {\n        bullet.flare(\"erased\");\n        bullet.remove();\n      });\n    },\n\n    onspawnItem: function(e) {\n      const item = e.item;\n      item.addChildTo(this.glLayer);\n      this.items.push(item);\n    },\n\n    onspawnParticle: function(e) {\n      const EmitterClass = phina.using(e.className);\n      const emitter = EmitterClass(this.glLayer, this.glLayer.topEffectDrawer);\n      emitter.x = e.x;\n      emitter.y = e.y;\n      emitter.addChildTo(this.glLayer);\n    },\n\n  });\n});","phina.namespace(() => {\n\n  phina.define(\"passion.StageAssetLoadScene\", {\n    superClass: \"phina.display.DisplayScene\",\n\n    init: function(options) {\n      this.superInit(options);\n\n      this.fromJSON({\n        children: {\n          bg0: {\n            className: \"phina.display.Sprite\",\n            arguments: passion.GameSceneBg.drawBgTexture(),\n            originX: 0,\n            originY: 0,\n          },\n          bg1: {\n            className: \"passion.UIFrame\",\n            arguments: {\n              fill: \"black\",\n              stroke: null,\n              width: SCREEN_WIDTH * 0.9,\n              height: SCREEN_HEIGHT * 0.1,\n            },\n            x: SCREEN_WIDTH * 0.5,\n            y: SCREEN_HEIGHT * 0.5,\n          },\n          label: {\n            className: \"phina.display.Label\",\n            arguments: {\n              text: \"\",\n            },\n            x: SCREEN_WIDTH * 0.5,\n            y: SCREEN_HEIGHT * 0.5,\n            alpha: 0,\n          },\n        },\n      });\n\n      this.step0(options.stage);\n    },\n\n    update: function(app) {\n      let t = Math.floor(app.ticker.frame * 0.1) % 4;\n      let s = \"downloading\";\n      t.times(() =>  s += \".\");\n      s.paddingRight(\"downloading\".length + 3, \" \");\n      this.label.text = s;\n    },\n\n    step0: function(stageName) {\n      const loader = phina.asset.AssetLoader();\n      loader.load({\n        json: { \"stage\": \"./asset/stage/\" + stageName + \".json\" }\n      });\n      this.label.tweener.fadeIn(1000);\n      loader.on(\"load\", e => this.step1());\n\n      // this.label.text = \"step0\";\n    },\n\n    step1: function() {\n      const stageData = phina.asset.AssetManager.get(\"json\", \"stage\").data;\n      // console.log(stageData);\n\n      const enemies = {};\n      stageData.enemies.forEach(enemy => enemies[enemy + \".enemy\"] = \"./asset/enemy/\" + enemy + \".json\");\n      \n      const sounds = {};\n      stageData.bgm.forEach((b, idx) => sounds[\"bgm\" + idx] = \"./asset/sound/\" + b.bgm + \".mp3\");\n\n      const loader = phina.asset.AssetLoader();\n      loader.load({\n        json: enemies,\n        sound: sounds,\n        image: { \"bg\": \"./asset/image/\" + stageData.bg + \".png\" },\n      });\n      loader.on(\"load\", e => this.step2(stageData));\n\n      // this.label.text = \"step1\";\n    },\n\n    step2: function(stageData) {\n      const textures = {};\n      stageData.enemies\n        .map(enemy => phina.asset.AssetManager.get(\"json\", enemy + \".enemy\").data)\n        .map(enemyData => enemyData.texture)\n        .uniq()\n        .forEach(texture => textures[texture] = \"./asset/image/\" + texture + \".png\");\n\n      const loader = phina.asset.AssetLoader();\n      loader.load({\n        image: textures,\n      });\n      loader.on(\"load\", () => this.step3(stageData));\n\n      // this.label.text = \"step2\";\n    },\n\n    step3: function(stageData) {\n      const xmls = {};\n      stageData.enemies\n        .map(enemy => phina.asset.AssetManager.get(\"json\", enemy + \".enemy\").data)\n        .forEach(enemyData => {\n          if (enemyData.motion) {\n            xmls[\"motion/\" + enemyData.motion] = \"./asset/motion/\" + enemyData.motion + \".xml\";\n          }\n          if (enemyData.attack) {\n            xmls[\"attack/\" + enemyData.attack] = \"./asset/attack/\" + enemyData.attack + \".xml\";\n          }\n        });\n      stageData.timeline.forEach(task => {\n        if (task.arguments.motion) {\n          xmls[\"motion/\" + task.arguments.motion] = \"./asset/motion/\" + task.arguments.motion + \".xml\";\n        }\n        if (task.arguments.attack) {\n          xmls[\"attack/\" + task.arguments.attack] = \"./asset/attack/\" + task.arguments.attack + \".xml\";\n        }\n        if (task.arguments.enemy) {\n          if (task.arguments.enemy.motion) {\n            xmls[\"motion/\" + task.arguments.enemy.motion] = \"./asset/motion/\" + task.arguments.enemy.motion + \".xml\";\n          }\n          if (task.arguments.enemy.attack) {\n            xmls[\"attack/\" + task.arguments.enemy.attack] = \"./asset/attack/\" + task.arguments.enemy.attack + \".xml\";\n          }\n        }\n      });\n\n      const loader = phina.asset.AssetLoader();\n      loader.load({\n        xml: xmls,\n      });\n      loader.on(\"load\", () => this.step4());\n\n      // this.label.text = \"step3\";\n    },\n\n    step4: function() {\n      this.label.tweener.clear().fadeOut(100);\n      this.bg1.tweener.fadeOut(500).call(() => this.app.popScene());\n    },\n\n  });\n});\n","phina.namespace(() => {\n\n  phina.define(\"passion.Shot\", {\n    superClass: \"passion.Sprite\",\n\n    bx: 0,\n    by: 0,\n    power: 0,\n    age: 0,\n\n    init: function(id, instanceData, instanceStride) {\n      this.superInit(id, instanceData, instanceStride);\n      this.on(\"enterframe\", e => {\n        this.bx = this.x;\n        this.by = this.y;\n        this.controll(e.app);\n        this.age += 1;\n      });\n    },\n\n    spawn: function(options) {\n      this.superMethod(\"spawn\", options);\n      this.age = 0;\n      return this;\n    },\n\n    controll: function(app) {},\n\n    _static: {\n      commonSetup: function(shotClassName, glLayer, player, shots, gameScene) {\n        const ShotClass = this;\n        glLayer.shotDrawer.addObjType(\"shot\", {\n          className: shotClassName,\n          texture: ShotClass.texture || \"bullets.png\",\n          additiveBlending: ShotClass.additiveBlending || false,\n          count: ShotClass.count || 9,\n        });\n\n        // 着弾エフェクト\n        if (ShotClass.hitEffect) {\n          glLayer.topEffectDrawer.addObjType(\"hitEffect\", ShotClass.hitEffect);\n        }\n\n        // 発射口エフェクト\n        if (ShotClass.mazzleFlashEffect) {\n          glLayer.effectDrawer.addObjType(\"mazzleFlashEffect\", ShotClass.mazzleFlashEffect);\n        }\n\n        const shotPool = glLayer.shotDrawer.objParameters[\"shot\"].pool;\n        player.heatByShot = ShotClass.heatByShot;\n        player.on(\"fireShot\", e => {\n          if (shotPool.length >= ShotClass.fireCount) {\n            for (let i = 0; i < ShotClass.fireCount; i++) {\n              const s = glLayer.shotDrawer.get(\"shot\");\n              if (s) {\n                s.spawn(player, i, gameScene).addChildTo(glLayer);\n                shots.push(s);\n              }\n            }\n            // TODO 効果音\n            // phina.asset.SoundManager.play(\"shot\");\n          }\n        });\n\n        shotPool.forEach(shot => {\n          if (ShotClass.hitEffect) {\n            shot.on(\"hit\", e => {\n              const effect = glLayer.topEffectDrawer.get(\"hitEffect\");\n              if (effect) {\n                effect\n                  .spawn({\n                    x: shot.x,\n                    y: shot.y,\n                  })\n                  .addChildTo(glLayer);\n              }\n            });\n          }\n          shot.on(\"removed\", e => shots.erase(shot));\n        });\n\n        if (ShotClass.mazzleFlashEffect) {\n          player.on(\"fireShot\", e => {\n            const effect = glLayer.effectDrawer.get(\"mazzleFlashEffect\");\n            if (effect) {\n              effect\n                .spawn({\n                  x: player.x + ShotClass.mazzleFlashEffect.x,\n                  y: player.y + ShotClass.mazzleFlashEffect.y,\n                })\n                .addChildTo(glLayer);\n            }\n          });\n        }\n      },\n    },\n  });\n\n});\n","phina.namespace(() => {\n  \n  phina.define(\"passion.Laser\", {\n    superClass: \"passion.Shot\",\n\n    _static: {\n      setup: passion.Shot.commonSetup,\n      count: 20,\n      heatByShot: 1,\n      fireCount: 1,\n      additiveBlending: true,\n      texture: \"effect.png\",\n      mazzleFlashEffect: {\n        className: \"passion.LaserMazzleFlash\",\n        texture: \"effect.png\",\n        count: 20,\n        additiveBlending: true,\n        x: 0,\n        y: -10,\n      }\n    },\n\n    init: function(id, instanceData, instanceStride) {\n      this.superInit(id, instanceData, instanceStride);\n      this.power = 1;\n    },\n\n    spawn: function(player, index, gameScene) {\n      this.player = player;\n      const f = Math.randint(6, 8);\n      this.superMethod(\"spawn\", {\n        x: player.x,\n        y: player.y - 30,\n        rotation: -Math.PI * 0.5,\n        scaleX: 84,\n        scaleY: 84,\n        frameX: (f % 8) / 8,\n        frameY: ~~(f / 8) / 8,\n        frameW: 1 / 8,\n        frameH: 1 / 8,\n        red: 1.0,\n        green: 1.0,\n        blue: 1.0,\n        alpha: 0.8,\n      });\n      return this;\n    },\n\n    controll: function(app) {\n      this.x = this.player.x;\n      this.y -= 30;\n      this.scaleX = Math.min(this.scaleY + 80, 250);\n      this.scaleY = Math.max(this.scaleY - 32, 16);\n      if (this.y < GAME_AREA_HEIGHT * -0.1) {\n        this.remove();\n      }\n    },\n\n    onhit: function(e) {\n      if (e.enemy.hp > 0) {\n        this.remove();\n      }\n    },\n  });\n\n});\n","phina.namespace(() => {\n  \n  phina.define(\"passion.NormalShot\", {\n    superClass: \"passion.Shot\",\n\n    _static: {\n      setup: passion.Shot.commonSetup,\n      count: 9,\n      heatByShot: 8,\n      fireCount: 3,\n      additiveBlending: false,\n      hitEffect: {\n        className: \"passion.BulletEraseEffect\",\n        texture: \"bullets_erase.png\",\n        count: 9,\n      },\n    },\n\n    init: function(id, instanceData, instanceStride) {\n      this.superInit(id, instanceData, instanceStride);\n      this.power = 1;\n    },\n\n    spawn: function(player, index, gameScene) {\n      this.superMethod(\"spawn\", {\n        x: player.x + [-1, 1, 0][index] * 10,\n        y: player.y - 30 + [0, 0, -1][index] * 10,\n        rotation: -Math.PI * 0.5,\n        scaleX: 48,\n        scaleY: 48,\n        frameX: 1 / 8,\n        frameY: 1 / 8,\n        frameW: 1 / 8,\n        frameH: 1 / 8,\n        red: 1.0,\n        green: 1.0,\n        blue: 1.0,\n        alpha: 0.8,\n      });\n      return this;\n    },\n\n    controll: function(app) {\n      this.y -= 20;\n      if (this.y < GAME_AREA_HEIGHT * -0.1) {\n        this.remove();\n      }\n    },\n\n    onhit: function(e) {\n      this.remove();\n    },\n  });\n\n});\n","phina.namespace(() => {\n  \n  phina.define(\"passion.NormalShot2\", {\n    superClass: \"passion.Shot\",\n\n    _static: {\n      setup: passion.Shot.commonSetup,\n      count: 18,\n      heatByShot: 8,\n      fireCount: 5,\n      additiveBlending: false,\n      hitEffect: {\n        className: \"passion.BulletEraseEffect\",\n        texture: \"bullets_erase.png\",\n        count: 18,\n      },\n    },\n\n    init: function(id, instanceData, instanceStride) {\n      this.superInit(id, instanceData, instanceStride);\n      this.power = 1;\n    },\n\n    spawn: function(player, index, gameScene) {\n      this.superMethod(\"spawn\", {\n        x: player.x + [-2, 2, -1, 1, 0][index] * 10,\n        y: player.y - 30 + [1, 1, 0, 0, -1][index] * 10,\n        rotation: -Math.PI * 0.5,\n        scaleX: 48,\n        scaleY: 48,\n        frameX: 1 / 8,\n        frameY: 1 / 8,\n        frameW: 1 / 8,\n        frameH: 1 / 8,\n        red: 1.0,\n        green: 1.0,\n        blue: 1.0,\n        alpha: 0.8,\n      });\n      return this;\n    },\n\n    controll: function(app) {\n      this.y -= 20;\n      if (this.y < GAME_AREA_HEIGHT * -0.1) {\n        this.remove();\n      }\n    },\n\n    onhit: function(e) {\n      this.remove();\n    },\n  });\n\n});\n","phina.namespace(() => {\n  \n  phina.define(\"passion.WideShot\", {\n    superClass: \"passion.Shot\",\n\n    _static: {\n      setup: passion.Shot.commonSetup,\n      count: 9,\n      heatByShot: 6,\n      fireCount: 3,\n      additiveBlending: false,\n      hitEffect: {\n        className: \"passion.BulletEraseEffect\",\n        texture: \"bullets_erase.png\",\n        count: 9,\n      },\n    },\n\n    init: function(id, instanceData, instanceStride) {\n      this.superInit(id, instanceData, instanceStride);\n      this.power = 1;\n    },\n\n    spawn: function(player, index, gameScene) {\n      this.superMethod(\"spawn\", {\n        x: player.x + [-1, 1, 0][index] * 20,\n        y: player.y,\n        rotation: -Math.PI * 0.5 + [-1, 1, 0][index] * 0.2,\n        scaleX: 48,\n        scaleY: 48,\n        frameX: 1 / 8,\n        frameY: 1 / 8,\n        frameW: 1 / 8,\n        frameH: 1 / 8,\n        red: 1.0,\n        green: 1.0,\n        blue: 1.0,\n        alpha: 0.8,\n      });\n\n      this.dx = Math.cos(this.rotation) * 20;\n      this.dy = Math.sin(this.rotation) * 20;\n      return this;\n    },\n\n    controll: function(app) {\n      this.x += this.dx;\n      this.y += this.dy;\n      if (this.y < GAME_AREA_HEIGHT * -0.1 || this.x < GAME_AREA_WIDTH * -0.1 || GAME_AREA_WIDTH * 1.1 < this.x) {\n        this.remove();\n      }\n    },\n\n    onhit: function(e) {\n      this.remove();\n    },\n  });\n\n});\n","phina.namespace(() => {\n  \n  phina.define(\"passion.WideShot2\", {\n    superClass: \"passion.Shot\",\n\n    _static: {\n      setup: passion.Shot.commonSetup,\n      count: 27,\n      heatByShot: 6,\n      fireCount: 9,\n      additiveBlending: false,\n      hitEffect: {\n        className: \"passion.BulletEraseEffect\",\n        texture: \"bullets_erase.png\",\n        count: 27,\n      },\n    },\n\n    init: function(id, instanceData, instanceStride) {\n      this.superInit(id, instanceData, instanceStride);\n      this.power = 1;\n    },\n\n    spawn: function(player, index, gameScene) {\n      const d = ~~(index / 3);\n      const i = index % 3;\n\n      this.superMethod(\"spawn\", {\n        x: player.x + [-1, 1, 0][d] * 30 + [-1, 1, 0][i] * 10,\n        y: player.y,\n        rotation: -Math.PI * 0.5 + [-1, 1, 0][d] * 0.2,\n        scaleX: 48,\n        scaleY: 48,\n        frameX: 1 / 8,\n        frameY: 1 / 8,\n        frameW: 1 / 8,\n        frameH: 1 / 8,\n        red: 1.0,\n        green: 1.0,\n        blue: 1.0,\n        alpha: 0.8,\n      });\n\n      this.dx = Math.cos(this.rotation) * 20;\n      this.dy = Math.sin(this.rotation) * 20;\n      return this;\n    },\n\n    controll: function(app) {\n      this.x += this.dx;\n      this.y += this.dy;\n      if (this.y < GAME_AREA_HEIGHT * -0.1 || this.x < GAME_AREA_WIDTH * -0.1 || GAME_AREA_WIDTH * 1.1 < this.x) {\n        this.remove();\n      }\n    },\n\n    onhit: function(e) {\n      this.remove();\n    },\n  });\n\n});\n"]}